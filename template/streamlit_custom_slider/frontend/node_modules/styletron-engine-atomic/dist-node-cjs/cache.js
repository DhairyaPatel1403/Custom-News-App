"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MultiCache = exports.Cache = void 0;

var _sequentialIdGenerator = _interopRequireDefault(require("./sequential-id-generator"));

var _sortCssMediaQueries = _interopRequireDefault(require("./sort-css-media-queries"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class MultiCache {
  constructor(idGenerator, onNewCache, onNewValue) {
    this.idGenerator = idGenerator;
    this.onNewCache = onNewCache;
    this.onNewValue = onNewValue;
    this.sortedCacheKeys = [];
    this.caches = {};
  }

  getCache(key) {
    if (!this.caches[key]) {
      const cache = new Cache(this.idGenerator, this.onNewValue);
      cache.key = key;
      this.sortedCacheKeys.push(key);
      this.sortedCacheKeys.sort(_sortCssMediaQueries.default);
      const keyIndex = this.sortedCacheKeys.indexOf(key);
      const insertBeforeMedia = keyIndex < this.sortedCacheKeys.length - 1 ? this.sortedCacheKeys[keyIndex + 1] : void 0;
      this.caches[key] = cache;
      this.onNewCache(key, cache, insertBeforeMedia);
    }

    return this.caches[key];
  }

  getSortedCacheKeys() {
    return this.sortedCacheKeys;
  }

}

exports.MultiCache = MultiCache;

class Cache {
  constructor(idGenerator, onNewValue) {
    this.cache = {};
    this.idGenerator = idGenerator;
    this.onNewValue = onNewValue;
  }

  addValue(key, value) {
    const cached = this.cache[key];

    if (cached) {
      return cached;
    }

    const id = this.idGenerator.next();
    this.cache[key] = id;
    this.onNewValue(this, id, value);
    return id;
  }

}

exports.Cache = Cache;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNdWx0aUNhY2hlIiwiY29uc3RydWN0b3IiLCJpZEdlbmVyYXRvciIsIm9uTmV3Q2FjaGUiLCJvbk5ld1ZhbHVlIiwic29ydGVkQ2FjaGVLZXlzIiwiY2FjaGVzIiwiZ2V0Q2FjaGUiLCJrZXkiLCJjYWNoZSIsIkNhY2hlIiwicHVzaCIsInNvcnQiLCJzb3J0TXEiLCJrZXlJbmRleCIsImluZGV4T2YiLCJpbnNlcnRCZWZvcmVNZWRpYSIsImxlbmd0aCIsImdldFNvcnRlZENhY2hlS2V5cyIsImFkZFZhbHVlIiwidmFsdWUiLCJjYWNoZWQiLCJpZCIsIm5leHQiXSwic291cmNlcyI6WyJzcmMvY2FjaGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFNlcXVlbnRpYWxJREdlbmVyYXRvciBmcm9tIFwiLi9zZXF1ZW50aWFsLWlkLWdlbmVyYXRvclwiO1xuaW1wb3J0IHNvcnRNcSBmcm9tIFwiLi9zb3J0LWNzcy1tZWRpYS1xdWVyaWVzXCI7XG5cbnR5cGUgT25OZXdDYWNoZUZuPFQ+ID0gKFxuICBrZXk6IHN0cmluZyxcbiAgY2FjaGU6IENhY2hlPFQ+LFxuICB2YWx1ZT86IHN0cmluZyB8IG51bGwsXG4pID0+IGFueTtcbnR5cGUgT25OZXdWYWx1ZUZuPFQ+ID0gKGNhY2hlOiBDYWNoZTxUPiwgaWQ6IHN0cmluZywgdmFsdWU6IFQpID0+IGFueTtcblxuZXhwb3J0IGNsYXNzIE11bHRpQ2FjaGU8VD4ge1xuICBjYWNoZXM6IHtcbiAgICBbeDogc3RyaW5nXTogQ2FjaGU8VD47XG4gIH07XG4gIGlkR2VuZXJhdG9yOiBTZXF1ZW50aWFsSURHZW5lcmF0b3I7XG4gIG9uTmV3Q2FjaGU6IE9uTmV3Q2FjaGVGbjxUPjtcbiAgb25OZXdWYWx1ZTogT25OZXdWYWx1ZUZuPFQ+O1xuICBzb3J0ZWRDYWNoZUtleXM6IHN0cmluZ1tdO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGlkR2VuZXJhdG9yOiBTZXF1ZW50aWFsSURHZW5lcmF0b3IsXG4gICAgb25OZXdDYWNoZTogT25OZXdDYWNoZUZuPFQ+LFxuICAgIG9uTmV3VmFsdWU6IE9uTmV3VmFsdWVGbjxUPixcbiAgKSB7XG4gICAgdGhpcy5pZEdlbmVyYXRvciA9IGlkR2VuZXJhdG9yO1xuICAgIHRoaXMub25OZXdDYWNoZSA9IG9uTmV3Q2FjaGU7XG4gICAgdGhpcy5vbk5ld1ZhbHVlID0gb25OZXdWYWx1ZTtcbiAgICB0aGlzLnNvcnRlZENhY2hlS2V5cyA9IFtdO1xuICAgIHRoaXMuY2FjaGVzID0ge307XG4gIH1cblxuICBnZXRDYWNoZShrZXk6IHN0cmluZyk6IENhY2hlPFQ+IHtcbiAgICBpZiAoIXRoaXMuY2FjaGVzW2tleV0pIHtcbiAgICAgIGNvbnN0IGNhY2hlID0gbmV3IENhY2hlKHRoaXMuaWRHZW5lcmF0b3IsIHRoaXMub25OZXdWYWx1ZSk7XG4gICAgICBjYWNoZS5rZXkgPSBrZXk7XG4gICAgICB0aGlzLnNvcnRlZENhY2hlS2V5cy5wdXNoKGtleSk7XG4gICAgICB0aGlzLnNvcnRlZENhY2hlS2V5cy5zb3J0KHNvcnRNcSk7XG4gICAgICBjb25zdCBrZXlJbmRleCA9IHRoaXMuc29ydGVkQ2FjaGVLZXlzLmluZGV4T2Yoa2V5KTtcbiAgICAgIGNvbnN0IGluc2VydEJlZm9yZU1lZGlhID1cbiAgICAgICAga2V5SW5kZXggPCB0aGlzLnNvcnRlZENhY2hlS2V5cy5sZW5ndGggLSAxXG4gICAgICAgICAgPyB0aGlzLnNvcnRlZENhY2hlS2V5c1trZXlJbmRleCArIDFdXG4gICAgICAgICAgOiB2b2lkIDA7XG4gICAgICB0aGlzLmNhY2hlc1trZXldID0gY2FjaGU7XG4gICAgICB0aGlzLm9uTmV3Q2FjaGUoa2V5LCBjYWNoZSwgaW5zZXJ0QmVmb3JlTWVkaWEpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jYWNoZXNba2V5XTtcbiAgfVxuXG4gIGdldFNvcnRlZENhY2hlS2V5cygpIHtcbiAgICByZXR1cm4gdGhpcy5zb3J0ZWRDYWNoZUtleXM7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENhY2hlPFQ+IHtcbiAgY2FjaGU6IHtcbiAgICBbeDogc3RyaW5nXTogc3RyaW5nO1xuICB9O1xuICBpZEdlbmVyYXRvcjogU2VxdWVudGlhbElER2VuZXJhdG9yO1xuICBrZXk6IHN0cmluZztcbiAgb25OZXdWYWx1ZTogKGNhY2hlOiBDYWNoZTxUPiwgaWQ6IHN0cmluZywgdmFsdWU6IGFueSkgPT4gYW55O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGlkR2VuZXJhdG9yOiBTZXF1ZW50aWFsSURHZW5lcmF0b3IsXG4gICAgb25OZXdWYWx1ZTogKGNhY2hlOiBDYWNoZTxUPiwgaWQ6IHN0cmluZywgdmFsdWU6IGFueSkgPT4gYW55LFxuICApIHtcbiAgICB0aGlzLmNhY2hlID0ge307XG4gICAgdGhpcy5pZEdlbmVyYXRvciA9IGlkR2VuZXJhdG9yO1xuICAgIHRoaXMub25OZXdWYWx1ZSA9IG9uTmV3VmFsdWU7XG4gIH1cblxuICBhZGRWYWx1ZShrZXk6IHN0cmluZywgdmFsdWU6IFQpIHtcbiAgICBjb25zdCBjYWNoZWQgPSB0aGlzLmNhY2hlW2tleV07XG4gICAgaWYgKGNhY2hlZCkge1xuICAgICAgcmV0dXJuIGNhY2hlZDtcbiAgICB9XG4gICAgY29uc3QgaWQgPSB0aGlzLmlkR2VuZXJhdG9yLm5leHQoKTtcbiAgICB0aGlzLmNhY2hlW2tleV0gPSBpZDtcbiAgICB0aGlzLm9uTmV3VmFsdWUodGhpcywgaWQsIHZhbHVlKTtcbiAgICByZXR1cm4gaWQ7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOzs7O0FBU08sTUFBTUEsVUFBTixDQUFvQjtFQVN6QkMsV0FBVyxDQUNUQyxXQURTLEVBRVRDLFVBRlMsRUFHVEMsVUFIUyxFQUlUO0lBQ0EsS0FBS0YsV0FBTCxHQUFtQkEsV0FBbkI7SUFDQSxLQUFLQyxVQUFMLEdBQWtCQSxVQUFsQjtJQUNBLEtBQUtDLFVBQUwsR0FBa0JBLFVBQWxCO0lBQ0EsS0FBS0MsZUFBTCxHQUF1QixFQUF2QjtJQUNBLEtBQUtDLE1BQUwsR0FBYyxFQUFkO0VBQ0Q7O0VBRURDLFFBQVEsQ0FBQ0MsR0FBRCxFQUF3QjtJQUM5QixJQUFJLENBQUMsS0FBS0YsTUFBTCxDQUFZRSxHQUFaLENBQUwsRUFBdUI7TUFDckIsTUFBTUMsS0FBSyxHQUFHLElBQUlDLEtBQUosQ0FBVSxLQUFLUixXQUFmLEVBQTRCLEtBQUtFLFVBQWpDLENBQWQ7TUFDQUssS0FBSyxDQUFDRCxHQUFOLEdBQVlBLEdBQVo7TUFDQSxLQUFLSCxlQUFMLENBQXFCTSxJQUFyQixDQUEwQkgsR0FBMUI7TUFDQSxLQUFLSCxlQUFMLENBQXFCTyxJQUFyQixDQUEwQkMsNEJBQTFCO01BQ0EsTUFBTUMsUUFBUSxHQUFHLEtBQUtULGVBQUwsQ0FBcUJVLE9BQXJCLENBQTZCUCxHQUE3QixDQUFqQjtNQUNBLE1BQU1RLGlCQUFpQixHQUNyQkYsUUFBUSxHQUFHLEtBQUtULGVBQUwsQ0FBcUJZLE1BQXJCLEdBQThCLENBQXpDLEdBQ0ksS0FBS1osZUFBTCxDQUFxQlMsUUFBUSxHQUFHLENBQWhDLENBREosR0FFSSxLQUFLLENBSFg7TUFJQSxLQUFLUixNQUFMLENBQVlFLEdBQVosSUFBbUJDLEtBQW5CO01BQ0EsS0FBS04sVUFBTCxDQUFnQkssR0FBaEIsRUFBcUJDLEtBQXJCLEVBQTRCTyxpQkFBNUI7SUFDRDs7SUFDRCxPQUFPLEtBQUtWLE1BQUwsQ0FBWUUsR0FBWixDQUFQO0VBQ0Q7O0VBRURVLGtCQUFrQixHQUFHO0lBQ25CLE9BQU8sS0FBS2IsZUFBWjtFQUNEOztBQXhDd0I7Ozs7QUEyQ3BCLE1BQU1LLEtBQU4sQ0FBZTtFQVFwQlQsV0FBVyxDQUNUQyxXQURTLEVBRVRFLFVBRlMsRUFHVDtJQUNBLEtBQUtLLEtBQUwsR0FBYSxFQUFiO0lBQ0EsS0FBS1AsV0FBTCxHQUFtQkEsV0FBbkI7SUFDQSxLQUFLRSxVQUFMLEdBQWtCQSxVQUFsQjtFQUNEOztFQUVEZSxRQUFRLENBQUNYLEdBQUQsRUFBY1ksS0FBZCxFQUF3QjtJQUM5QixNQUFNQyxNQUFNLEdBQUcsS0FBS1osS0FBTCxDQUFXRCxHQUFYLENBQWY7O0lBQ0EsSUFBSWEsTUFBSixFQUFZO01BQ1YsT0FBT0EsTUFBUDtJQUNEOztJQUNELE1BQU1DLEVBQUUsR0FBRyxLQUFLcEIsV0FBTCxDQUFpQnFCLElBQWpCLEVBQVg7SUFDQSxLQUFLZCxLQUFMLENBQVdELEdBQVgsSUFBa0JjLEVBQWxCO0lBQ0EsS0FBS2xCLFVBQUwsQ0FBZ0IsSUFBaEIsRUFBc0JrQixFQUF0QixFQUEwQkYsS0FBMUI7SUFDQSxPQUFPRSxFQUFQO0VBQ0Q7O0FBMUJtQiJ9