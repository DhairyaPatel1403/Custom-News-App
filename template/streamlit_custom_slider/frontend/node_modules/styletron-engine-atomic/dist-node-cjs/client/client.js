"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _sequentialIdGenerator = _interopRequireDefault(require("../sequential-id-generator"));

var _cache2 = require("../cache");

var _injectStylePrefixed = _interopRequireDefault(require("../inject-style-prefixed"));

var _css = require("../css");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-env browser */
const STYLES_HYDRATOR = /\.([^{:]+)(:[^{]+)?{(?:[^}]*;)?([^}]*?)}/g;
const KEYFRAMES_HYRDATOR = /@keyframes ([^{]+){((?:(?:from|to|(?:\d+\.?\d*%))\{(?:[^}])*})*)}/g;
const FONT_FACE_HYDRATOR = /@font-face\{font-family:([^;]+);([^}]*)\}/g;

function hydrateStyles(cache, hydrator, css) {
  let match;

  while (match = hydrator.exec(css)) {
    const [, id, pseudo, key] = match;

    if (false && process.env.NODE_ENV !== "production" && window.__STYLETRON_DEVTOOLS__) {
      hydrateDevtoolsRule(match[0]);
    }

    const fullKey = pseudo ? `${pseudo}${key}` : key;
    cache.cache[fullKey] = id; // set cache without triggering side effects

    cache.idGenerator.increment(); // increment id
  }
}

function hydrate(cache, hydrator, css) {
  let match;

  while (match = hydrator.exec(css)) {
    const [, id, key] = match;

    if (false && process.env.NODE_ENV !== "production" && window.__STYLETRON_DEVTOOLS__) {
      hydrateDevtoolsRule(match[0]);
    }

    cache.cache[key] = id; // set cache without triggering side effects

    cache.idGenerator.increment(); // increment id
  }
}

class StyletronClient {
  constructor(opts = {}) {
    this.styleElements = {};
    const styleIdGenerator = new _sequentialIdGenerator.default(opts.prefix);

    const onNewStyle = (cache, id, value) => {
      const {
        pseudo,
        block
      } = value;
      const sheet = this.styleElements[cache.key].sheet;
      const selector = (0, _css.atomicSelector)(id, pseudo);
      const rule = (0, _css.styleBlockToRule)(selector, block);

      try {
        sheet.insertRule(rule, sheet.cssRules.length);

        if (false && process.env.NODE_ENV !== "production" && window.__STYLETRON_DEVTOOLS__) {
          insertRuleIntoDevtools(selector, block);
        }
      } catch (e) {
        if (process.env.NODE_ENV !== "production") {
          // eslint-disable-next-line no-console
          console.warn(`Failed to inject CSS: "${rule}". Perhaps this has invalid or un-prefixed properties?`);
        }
      }
    }; // Setup style cache


    this.styleCache = new _cache2.MultiCache(styleIdGenerator, (media, _cache, insertBeforeMedia) => {
      const styleElement = document.createElement("style");
      styleElement.media = media;

      if (insertBeforeMedia === void 0) {
        this.container.appendChild(styleElement);
      } else {
        const insertBeforeIndex = findSheetIndexWithMedia(this.container.children, insertBeforeMedia);
        this.container.insertBefore(styleElement, this.container.children[insertBeforeIndex]);
      }

      this.styleElements[media] = styleElement;
    }, onNewStyle);
    this.keyframesCache = new _cache2.Cache(new _sequentialIdGenerator.default(opts.prefix), (cache, id, value) => {
      this.styleCache.getCache("");
      const sheet = this.styleElements[""].sheet;
      const rule = (0, _css.keyframesBlockToRule)(id, (0, _css.keyframesToBlock)(value));

      try {
        sheet.insertRule(rule, sheet.cssRules.length);
      } catch (e) {
        if (process.env.NODE_ENV !== "production") {
          // eslint-disable-next-line no-console
          console.warn(`Failed to inject CSS: "${rule}". Perhaps this has invalid or un-prefixed properties?`);
        }
      }
    });
    this.fontFaceCache = new _cache2.Cache(new _sequentialIdGenerator.default(opts.prefix), (cache, id, value) => {
      this.styleCache.getCache("");
      const sheet = this.styleElements[""].sheet;
      const rule = (0, _css.fontFaceBlockToRule)(id, (0, _css.declarationsToBlock)(value));

      try {
        sheet.insertRule(rule, sheet.cssRules.length);
      } catch (e) {
        if (process.env.NODE_ENV !== "production") {
          // eslint-disable-next-line no-console
          console.warn(`Failed to inject CSS: "${rule}". Perhaps this has invalid or un-prefixed properties?`);
        }
      }
    });

    if (opts.container) {
      this.container = opts.container;
    } // Hydrate


    if (opts.hydrate && opts.hydrate.length > 0) {
      // infer container from parent element
      if (!this.container) {
        const parentElement = opts.hydrate[0].parentElement;

        if (parentElement !== null && parentElement !== void 0) {
          this.container = parentElement;
        }
      }

      for (let i = 0; i < opts.hydrate.length; i++) {
        const element = opts.hydrate[i];
        const hydrateType = element.getAttribute("data-hydrate");

        if (hydrateType === "font-face") {
          hydrate(this.fontFaceCache, FONT_FACE_HYDRATOR, element.textContent);
          continue;
        }

        if (hydrateType === "keyframes") {
          hydrate(this.keyframesCache, KEYFRAMES_HYRDATOR, element.textContent);
          continue;
        }

        const key = element.media ? element.media : "";
        this.styleElements[key] = element;
        const cache = new _cache2.Cache(styleIdGenerator, onNewStyle);
        cache.key = key;
        hydrateStyles(cache, STYLES_HYDRATOR, element.textContent);
        this.styleCache.sortedCacheKeys.push(key);
        this.styleCache.caches[key] = cache;
      }
    }

    if (!this.container) {
      if (document.head === null) {
        throw new Error("No container provided and `document.head` was null");
      }

      this.container = document.head;
    }
  }

  renderStyle(style) {
    return (0, _injectStylePrefixed.default)(this.styleCache, style, "", "");
  }

  renderFontFace(fontFace) {
    const key = (0, _css.declarationsToBlock)(fontFace);
    return this.fontFaceCache.addValue(key, fontFace);
  }

  renderKeyframes(keyframes) {
    const key = (0, _css.keyframesToBlock)(keyframes);
    return this.keyframesCache.addValue(key, keyframes);
  }

}

var _default = StyletronClient;
exports.default = _default;

function findSheetIndexWithMedia(children, media) {
  let index = 0;

  for (; index < children.length; index++) {
    const child = children[index];

    if (child.tagName === "STYLE" && child.media === media) {
      return index;
    }
  }

  return -1;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,