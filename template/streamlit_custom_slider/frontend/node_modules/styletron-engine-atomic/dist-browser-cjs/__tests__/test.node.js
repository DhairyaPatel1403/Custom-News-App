"use strict";

var _validateNoMixedHand = require("../validate-no-mixed-hand");

var _sortCssMediaQueries = _interopRequireDefault(require("../sort-css-media-queries"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

test("validateNoMixedHand", () => {
  expect((0, _validateNoMixedHand.validateNoMixedHand)({
    border: "red",
    borderColor: "blue",
    borderTopColor: "green"
  })).toEqual([{
    shorthand: {
      property: "border",
      value: "red"
    },
    longhand: {
      property: "borderTopColor",
      value: "green"
    }
  }, {
    shorthand: {
      property: "border",
      value: "red"
    },
    longhand: {
      property: "borderColor",
      value: "blue"
    }
  }, {
    shorthand: {
      property: "borderColor",
      value: "blue"
    },
    longhand: {
      property: "borderTopColor",
      value: "green"
    }
  }]);
});
test("sortMq simple", () => {
  const receivedOrder = ["screen and (max-width: 640px)", "screen and (min-width: 980px)", "screen and (max-width: 980px)", "screen and (max-width: 768px)", "screen and (min-width: 640px)", "screen and (min-width: 1280px)", "screen and (min-width: 768px)", "screen and (max-width: 1280px)"];
  const expectedOrder = ["screen and (min-width: 640px)", "screen and (min-width: 768px)", "screen and (min-width: 980px)", "screen and (min-width: 1280px)", "screen and (max-width: 1280px)", "screen and (max-width: 980px)", "screen and (max-width: 768px)", "screen and (max-width: 640px)"];
  expect(receivedOrder.sort(_sortCssMediaQueries.default)).toEqual(expectedOrder);
});
test("sortMq simple 2", () => {
  const receivedOrder = ["screen and (max-width: 640px)", "screen and (max-width: 640px)", "screen and (min-width: 1280px)", "screen and (max-width: 640px)"];
  const expectedOrder = ["screen and (min-width: 1280px)", "screen and (max-width: 640px)", "screen and (max-width: 640px)", "screen and (max-width: 640px)"];
  expect(receivedOrder.sort(_sortCssMediaQueries.default)).toEqual(expectedOrder);
});
test("sortMq no media type", () => {
  const receivedOrder = ["(min-width: 980px)", "(min-width: 640px)", "(min-width: 768px)"];
  const expectedOrder = ["(min-width: 640px)", "(min-width: 768px)", "(min-width: 980px)"];
  expect(receivedOrder.sort(_sortCssMediaQueries.default)).toEqual(expectedOrder);
});
test("sortMq without dimension", () => {
  const receivedOrder = ["tv", "print and (orientation: landscape)", "print and (orientation: portrait)", "print and (orientation: portrait)", "screen and (orientation: landscape)", "print", "screen and (orientation: portrait)", "print and (orientation: landscape)", "print and (orientation: portrait)"];
  const expectedOrder = ["screen and (orientation: landscape)", "screen and (orientation: portrait)", "tv", "print", "print and (orientation: landscape)", "print and (orientation: landscape)", "print and (orientation: portrait)", "print and (orientation: portrait)", "print and (orientation: portrait)"];
  expect(receivedOrder.sort(_sortCssMediaQueries.default)).toEqual(expectedOrder);
});
test("mixed", () => {
  const receivedOrder = ["tv", "print and (orientation: landscape)", "screen and (min-width: 1280px)", "screen and (max-width: 640px)", "screen and (orientation: landscape)", "print", "screen and (orientation: portrait)", "screen and (min-width: 768px)", "screen and (max-width: 1280px)", "print and (orientation: portrait)"];
  const expectedOrder = ["screen and (min-width: 768px)", "screen and (min-width: 1280px)", "screen and (max-width: 1280px)", "screen and (max-width: 640px)", "screen and (orientation: landscape)", "screen and (orientation: portrait)", "tv", "print", "print and (orientation: landscape)", "print and (orientation: portrait)"];
  expect(receivedOrder.sort(_sortCssMediaQueries.default)).toEqual(expectedOrder);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,