"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.generateHtmlString = generateHtmlString;

var _sequentialIdGenerator = _interopRequireDefault(require("../sequential-id-generator"));

var _cache = require("../cache");

var _injectStylePrefixed = _interopRequireDefault(require("../inject-style-prefixed"));

var _css = require("../css");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class StyletronServer {
  constructor(opts = {}) {
    this.styleRules = {
      "": ""
    };
    this.styleCache = new _cache.MultiCache(new _sequentialIdGenerator.default(opts.prefix), media => {
      this.styleRules[media] = "";
    }, (cache, id, value) => {
      const {
        pseudo,
        block
      } = value;
      this.styleRules[cache.key] += (0, _css.styleBlockToRule)((0, _css.atomicSelector)(id, pseudo), block);
    });
    this.fontFaceRules = "";
    this.fontFaceCache = new _cache.Cache(new _sequentialIdGenerator.default(opts.prefix), (cache, id, value) => {
      this.fontFaceRules += (0, _css.fontFaceBlockToRule)(id, (0, _css.declarationsToBlock)(value));
    });
    this.keyframesRules = "";
    this.keyframesCache = new _cache.Cache(new _sequentialIdGenerator.default(opts.prefix), (cache, id, value) => {
      this.keyframesRules += (0, _css.keyframesBlockToRule)(id, (0, _css.keyframesToBlock)(value));
    });
  }

  renderStyle(style) {
    return (0, _injectStylePrefixed.default)(this.styleCache, style, "", "");
  }

  renderFontFace(fontFace) {
    const key = JSON.stringify(fontFace);
    return this.fontFaceCache.addValue(key, fontFace);
  }

  renderKeyframes(keyframes) {
    const key = JSON.stringify(keyframes);
    return this.keyframesCache.addValue(key, keyframes);
  }

  getStylesheets() {
    return [...(this.keyframesRules.length ? [{
      css: this.keyframesRules,
      attrs: {
        "data-hydrate": "keyframes"
      }
    }] : []), ...(this.fontFaceRules.length ? [{
      css: this.fontFaceRules,
      attrs: {
        "data-hydrate": "font-face"
      }
    }] : []), ...sheetify(this.styleRules, this.styleCache.getSortedCacheKeys())];
  }

  getStylesheetsHtml(className = "_styletron_hydrate_") {
    return generateHtmlString(this.getStylesheets(), className);
  }

  getCss() {
    return this.keyframesRules + this.fontFaceRules + stringify(this.styleRules, this.styleCache.getSortedCacheKeys());
  }

}

function generateHtmlString(sheets, className) {
  let html = "";

  for (let i = 0; i < sheets.length; i++) {
    const sheet = sheets[i];
    const {
      class: originalClassName,
      ...rest
    } = sheet.attrs;
    const attrs = {
      class: originalClassName ? `${className} ${originalClassName}` : className,
      ...rest
    };
    html += `<style${attrsToString(attrs)}>${sheet.css}</style>`;
  }

  return html;
}

function attrsToString(attrs) {
  let result = "";

  for (const attr in attrs) {
    const value = attrs[attr];

    if (value === true) {
      result += " " + attr;
    } else if (value !== false) {
      result += ` ${attr}="${value}"`;
    }
  }

  return result;
}

function stringify(styleRules, sortedCacheKeys) {
  let result = "";
  sortedCacheKeys.forEach(cacheKey => {
    const rules = styleRules[cacheKey];

    if (cacheKey !== "") {
      result += `@media ${cacheKey}{${rules}}`;
    } else {
      result += rules;
    }
  });
  return result;
}

function sheetify(styleRules, sortedCacheKeys) {
  if (sortedCacheKeys.length === 0) {
    return [{
      css: "",
      attrs: {}
    }];
  }

  const sheets = [];
  sortedCacheKeys.forEach(cacheKey => {
    // omit media (cacheKey) attribute if empty
    const attrs = cacheKey === "" ? {} : {
      media: cacheKey
    };
    sheets.push({
      css: styleRules[cacheKey],
      attrs
    });
  });
  return sheets;
}

var _default = StyletronServer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,