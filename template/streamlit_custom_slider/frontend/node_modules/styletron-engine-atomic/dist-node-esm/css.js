import hyphenate from "./hyphenate-style-name";
import validateKeyframesObject from "./validate-keyframes-object";
export function atomicSelector(id, pseudo) {
  let selector = `.${id}`;

  if (pseudo) {
    selector += pseudo;
  }

  return selector;
}
export function keyframesToBlock(keyframes) {
  if (process.env.NODE_ENV !== "production") {
    validateKeyframesObject(keyframes);
  }

  if (process.env.NODE_ENV !== "production" && typeof Object.getPrototypeOf(keyframes) !== "undefined") {
    if (Object.getPrototypeOf(keyframes) !== Object.getPrototypeOf({})) {
      // eslint-disable-next-line no-console
      console.warn("Only plain objects should be used as animation values. Unexpectedly recieved:", keyframes);
    }
  }

  let result = "";

  for (const animationState in keyframes) {
    result += `${animationState}{${declarationsToBlock(keyframes[animationState])}}`;
  }

  return result;
}
export function declarationsToBlock(style) {
  let css = "";

  for (const prop in style) {
    const val = style[prop];

    if (typeof val === "string" || typeof val === "number") {
      css += `${hyphenate(prop)}:${val};`;
    }
  } // trim trailing semicolon


  return css.slice(0, -1);
}
export function keyframesBlockToRule(id, block) {
  return `@keyframes ${id}{${block}}`;
}
export function fontFaceBlockToRule(id, block) {
  return `@font-face{font-family:${id};${block}}`;
}
export function styleBlockToRule(selector, block) {
  return `${selector}{${block}}`;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJoeXBoZW5hdGUiLCJ2YWxpZGF0ZUtleWZyYW1lc09iamVjdCIsImF0b21pY1NlbGVjdG9yIiwiaWQiLCJwc2V1ZG8iLCJzZWxlY3RvciIsImtleWZyYW1lc1RvQmxvY2siLCJrZXlmcmFtZXMiLCJPYmplY3QiLCJnZXRQcm90b3R5cGVPZiIsImNvbnNvbGUiLCJ3YXJuIiwicmVzdWx0IiwiYW5pbWF0aW9uU3RhdGUiLCJkZWNsYXJhdGlvbnNUb0Jsb2NrIiwic3R5bGUiLCJjc3MiLCJwcm9wIiwidmFsIiwic2xpY2UiLCJrZXlmcmFtZXNCbG9ja1RvUnVsZSIsImJsb2NrIiwiZm9udEZhY2VCbG9ja1RvUnVsZSIsInN0eWxlQmxvY2tUb1J1bGUiXSwic291cmNlcyI6WyJzcmMvY3NzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImRlY2xhcmUgdmFyIF9fREVWX186IGJvb2xlYW47XG5cbmltcG9ydCBoeXBoZW5hdGUgZnJvbSBcIi4vaHlwaGVuYXRlLXN0eWxlLW5hbWVcIjtcbmltcG9ydCB2YWxpZGF0ZUtleWZyYW1lc09iamVjdCBmcm9tIFwiLi92YWxpZGF0ZS1rZXlmcmFtZXMtb2JqZWN0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBhdG9taWNTZWxlY3RvcihpZDogc3RyaW5nLCBwc2V1ZG86IHN0cmluZyk6IHN0cmluZyB7XG4gIGxldCBzZWxlY3RvciA9IGAuJHtpZH1gO1xuICBpZiAocHNldWRvKSB7XG4gICAgc2VsZWN0b3IgKz0gcHNldWRvO1xuICB9XG4gIHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGtleWZyYW1lc1RvQmxvY2soa2V5ZnJhbWVzOiB7W3g6IHN0cmluZ106IGFueX0pOiBzdHJpbmcge1xuICBpZiAoX19ERVZfXykge1xuICAgIHZhbGlkYXRlS2V5ZnJhbWVzT2JqZWN0KGtleWZyYW1lcyk7XG4gIH1cbiAgaWYgKF9fREVWX18gJiYgdHlwZW9mIE9iamVjdC5nZXRQcm90b3R5cGVPZihrZXlmcmFtZXMpICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgaWYgKE9iamVjdC5nZXRQcm90b3R5cGVPZihrZXlmcmFtZXMpICE9PSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yoe30pKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBcIk9ubHkgcGxhaW4gb2JqZWN0cyBzaG91bGQgYmUgdXNlZCBhcyBhbmltYXRpb24gdmFsdWVzLiBVbmV4cGVjdGVkbHkgcmVjaWV2ZWQ6XCIsXG4gICAgICAgIGtleWZyYW1lcyxcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIGxldCByZXN1bHQgPSBcIlwiO1xuICBmb3IgKGNvbnN0IGFuaW1hdGlvblN0YXRlIGluIGtleWZyYW1lcykge1xuICAgIHJlc3VsdCArPSBgJHthbmltYXRpb25TdGF0ZX17JHtkZWNsYXJhdGlvbnNUb0Jsb2NrKFxuICAgICAga2V5ZnJhbWVzW2FuaW1hdGlvblN0YXRlXSxcbiAgICApfX1gO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWNsYXJhdGlvbnNUb0Jsb2NrKHN0eWxlOiBhbnkpOiBzdHJpbmcge1xuICBsZXQgY3NzID0gXCJcIjtcbiAgZm9yIChjb25zdCBwcm9wIGluIHN0eWxlKSB7XG4gICAgY29uc3QgdmFsID0gc3R5bGVbcHJvcF07XG4gICAgaWYgKHR5cGVvZiB2YWwgPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgY3NzICs9IGAke2h5cGhlbmF0ZShwcm9wKX06JHt2YWx9O2A7XG4gICAgfVxuICB9XG4gIC8vIHRyaW0gdHJhaWxpbmcgc2VtaWNvbG9uXG4gIHJldHVybiBjc3Muc2xpY2UoMCwgLTEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24ga2V5ZnJhbWVzQmxvY2tUb1J1bGUoaWQ6IHN0cmluZywgYmxvY2s6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBgQGtleWZyYW1lcyAke2lkfXske2Jsb2NrfX1gO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9udEZhY2VCbG9ja1RvUnVsZShpZDogc3RyaW5nLCBibG9jazogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIGBAZm9udC1mYWNle2ZvbnQtZmFtaWx5OiR7aWR9OyR7YmxvY2t9fWA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHlsZUJsb2NrVG9SdWxlKHNlbGVjdG9yOiBzdHJpbmcsIGJsb2NrOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gYCR7c2VsZWN0b3J9eyR7YmxvY2t9fWA7XG59XG4iXSwibWFwcGluZ3MiOiJBQUVBLE9BQU9BLFNBQVAsTUFBc0Isd0JBQXRCO0FBQ0EsT0FBT0MsdUJBQVAsTUFBb0MsNkJBQXBDO0FBRUEsT0FBTyxTQUFTQyxjQUFULENBQXdCQyxFQUF4QixFQUFvQ0MsTUFBcEMsRUFBNEQ7RUFDakUsSUFBSUMsUUFBUSxHQUFJLElBQUdGLEVBQUcsRUFBdEI7O0VBQ0EsSUFBSUMsTUFBSixFQUFZO0lBQ1ZDLFFBQVEsSUFBSUQsTUFBWjtFQUNEOztFQUNELE9BQU9DLFFBQVA7QUFDRDtBQUVELE9BQU8sU0FBU0MsZ0JBQVQsQ0FBMEJDLFNBQTFCLEVBQWlFO0VBQ3RFLDJDQUFhO0lBQ1hOLHVCQUF1QixDQUFDTSxTQUFELENBQXZCO0VBQ0Q7O0VBQ0QsSUFBSSx5Q0FBVyxPQUFPQyxNQUFNLENBQUNDLGNBQVAsQ0FBc0JGLFNBQXRCLENBQVAsS0FBNEMsV0FBM0QsRUFBd0U7SUFDdEUsSUFBSUMsTUFBTSxDQUFDQyxjQUFQLENBQXNCRixTQUF0QixNQUFxQ0MsTUFBTSxDQUFDQyxjQUFQLENBQXNCLEVBQXRCLENBQXpDLEVBQW9FO01BQ2xFO01BQ0FDLE9BQU8sQ0FBQ0MsSUFBUixDQUNFLCtFQURGLEVBRUVKLFNBRkY7SUFJRDtFQUNGOztFQUNELElBQUlLLE1BQU0sR0FBRyxFQUFiOztFQUNBLEtBQUssTUFBTUMsY0FBWCxJQUE2Qk4sU0FBN0IsRUFBd0M7SUFDdENLLE1BQU0sSUFBSyxHQUFFQyxjQUFlLElBQUdDLG1CQUFtQixDQUNoRFAsU0FBUyxDQUFDTSxjQUFELENBRHVDLENBRWhELEdBRkY7RUFHRDs7RUFDRCxPQUFPRCxNQUFQO0FBQ0Q7QUFFRCxPQUFPLFNBQVNFLG1CQUFULENBQTZCQyxLQUE3QixFQUFpRDtFQUN0RCxJQUFJQyxHQUFHLEdBQUcsRUFBVjs7RUFDQSxLQUFLLE1BQU1DLElBQVgsSUFBbUJGLEtBQW5CLEVBQTBCO0lBQ3hCLE1BQU1HLEdBQUcsR0FBR0gsS0FBSyxDQUFDRSxJQUFELENBQWpCOztJQUNBLElBQUksT0FBT0MsR0FBUCxLQUFlLFFBQWYsSUFBMkIsT0FBT0EsR0FBUCxLQUFlLFFBQTlDLEVBQXdEO01BQ3RERixHQUFHLElBQUssR0FBRWhCLFNBQVMsQ0FBQ2lCLElBQUQsQ0FBTyxJQUFHQyxHQUFJLEdBQWpDO0lBQ0Q7RUFDRixDQVBxRCxDQVF0RDs7O0VBQ0EsT0FBT0YsR0FBRyxDQUFDRyxLQUFKLENBQVUsQ0FBVixFQUFhLENBQUMsQ0FBZCxDQUFQO0FBQ0Q7QUFFRCxPQUFPLFNBQVNDLG9CQUFULENBQThCakIsRUFBOUIsRUFBMENrQixLQUExQyxFQUFpRTtFQUN0RSxPQUFRLGNBQWFsQixFQUFHLElBQUdrQixLQUFNLEdBQWpDO0FBQ0Q7QUFFRCxPQUFPLFNBQVNDLG1CQUFULENBQTZCbkIsRUFBN0IsRUFBeUNrQixLQUF6QyxFQUFnRTtFQUNyRSxPQUFRLDBCQUF5QmxCLEVBQUcsSUFBR2tCLEtBQU0sR0FBN0M7QUFDRDtBQUVELE9BQU8sU0FBU0UsZ0JBQVQsQ0FBMEJsQixRQUExQixFQUE0Q2dCLEtBQTVDLEVBQW1FO0VBQ3hFLE9BQVEsR0FBRWhCLFFBQVMsSUFBR2dCLEtBQU0sR0FBNUI7QUFDRCJ9