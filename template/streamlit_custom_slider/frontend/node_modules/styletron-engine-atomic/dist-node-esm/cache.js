import SequentialIDGenerator from "./sequential-id-generator";
import sortMq from "./sort-css-media-queries";
export class MultiCache {
  constructor(idGenerator, onNewCache, onNewValue) {
    this.idGenerator = idGenerator;
    this.onNewCache = onNewCache;
    this.onNewValue = onNewValue;
    this.sortedCacheKeys = [];
    this.caches = {};
  }

  getCache(key) {
    if (!this.caches[key]) {
      const cache = new Cache(this.idGenerator, this.onNewValue);
      cache.key = key;
      this.sortedCacheKeys.push(key);
      this.sortedCacheKeys.sort(sortMq);
      const keyIndex = this.sortedCacheKeys.indexOf(key);
      const insertBeforeMedia = keyIndex < this.sortedCacheKeys.length - 1 ? this.sortedCacheKeys[keyIndex + 1] : void 0;
      this.caches[key] = cache;
      this.onNewCache(key, cache, insertBeforeMedia);
    }

    return this.caches[key];
  }

  getSortedCacheKeys() {
    return this.sortedCacheKeys;
  }

}
export class Cache {
  constructor(idGenerator, onNewValue) {
    this.cache = {};
    this.idGenerator = idGenerator;
    this.onNewValue = onNewValue;
  }

  addValue(key, value) {
    const cached = this.cache[key];

    if (cached) {
      return cached;
    }

    const id = this.idGenerator.next();
    this.cache[key] = id;
    this.onNewValue(this, id, value);
    return id;
  }

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTZXF1ZW50aWFsSURHZW5lcmF0b3IiLCJzb3J0TXEiLCJNdWx0aUNhY2hlIiwiY29uc3RydWN0b3IiLCJpZEdlbmVyYXRvciIsIm9uTmV3Q2FjaGUiLCJvbk5ld1ZhbHVlIiwic29ydGVkQ2FjaGVLZXlzIiwiY2FjaGVzIiwiZ2V0Q2FjaGUiLCJrZXkiLCJjYWNoZSIsIkNhY2hlIiwicHVzaCIsInNvcnQiLCJrZXlJbmRleCIsImluZGV4T2YiLCJpbnNlcnRCZWZvcmVNZWRpYSIsImxlbmd0aCIsImdldFNvcnRlZENhY2hlS2V5cyIsImFkZFZhbHVlIiwidmFsdWUiLCJjYWNoZWQiLCJpZCIsIm5leHQiXSwic291cmNlcyI6WyJzcmMvY2FjaGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFNlcXVlbnRpYWxJREdlbmVyYXRvciBmcm9tIFwiLi9zZXF1ZW50aWFsLWlkLWdlbmVyYXRvclwiO1xuaW1wb3J0IHNvcnRNcSBmcm9tIFwiLi9zb3J0LWNzcy1tZWRpYS1xdWVyaWVzXCI7XG5cbnR5cGUgT25OZXdDYWNoZUZuPFQ+ID0gKFxuICBrZXk6IHN0cmluZyxcbiAgY2FjaGU6IENhY2hlPFQ+LFxuICB2YWx1ZT86IHN0cmluZyB8IG51bGwsXG4pID0+IGFueTtcbnR5cGUgT25OZXdWYWx1ZUZuPFQ+ID0gKGNhY2hlOiBDYWNoZTxUPiwgaWQ6IHN0cmluZywgdmFsdWU6IFQpID0+IGFueTtcblxuZXhwb3J0IGNsYXNzIE11bHRpQ2FjaGU8VD4ge1xuICBjYWNoZXM6IHtcbiAgICBbeDogc3RyaW5nXTogQ2FjaGU8VD47XG4gIH07XG4gIGlkR2VuZXJhdG9yOiBTZXF1ZW50aWFsSURHZW5lcmF0b3I7XG4gIG9uTmV3Q2FjaGU6IE9uTmV3Q2FjaGVGbjxUPjtcbiAgb25OZXdWYWx1ZTogT25OZXdWYWx1ZUZuPFQ+O1xuICBzb3J0ZWRDYWNoZUtleXM6IHN0cmluZ1tdO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGlkR2VuZXJhdG9yOiBTZXF1ZW50aWFsSURHZW5lcmF0b3IsXG4gICAgb25OZXdDYWNoZTogT25OZXdDYWNoZUZuPFQ+LFxuICAgIG9uTmV3VmFsdWU6IE9uTmV3VmFsdWVGbjxUPixcbiAgKSB7XG4gICAgdGhpcy5pZEdlbmVyYXRvciA9IGlkR2VuZXJhdG9yO1xuICAgIHRoaXMub25OZXdDYWNoZSA9IG9uTmV3Q2FjaGU7XG4gICAgdGhpcy5vbk5ld1ZhbHVlID0gb25OZXdWYWx1ZTtcbiAgICB0aGlzLnNvcnRlZENhY2hlS2V5cyA9IFtdO1xuICAgIHRoaXMuY2FjaGVzID0ge307XG4gIH1cblxuICBnZXRDYWNoZShrZXk6IHN0cmluZyk6IENhY2hlPFQ+IHtcbiAgICBpZiAoIXRoaXMuY2FjaGVzW2tleV0pIHtcbiAgICAgIGNvbnN0IGNhY2hlID0gbmV3IENhY2hlKHRoaXMuaWRHZW5lcmF0b3IsIHRoaXMub25OZXdWYWx1ZSk7XG4gICAgICBjYWNoZS5rZXkgPSBrZXk7XG4gICAgICB0aGlzLnNvcnRlZENhY2hlS2V5cy5wdXNoKGtleSk7XG4gICAgICB0aGlzLnNvcnRlZENhY2hlS2V5cy5zb3J0KHNvcnRNcSk7XG4gICAgICBjb25zdCBrZXlJbmRleCA9IHRoaXMuc29ydGVkQ2FjaGVLZXlzLmluZGV4T2Yoa2V5KTtcbiAgICAgIGNvbnN0IGluc2VydEJlZm9yZU1lZGlhID1cbiAgICAgICAga2V5SW5kZXggPCB0aGlzLnNvcnRlZENhY2hlS2V5cy5sZW5ndGggLSAxXG4gICAgICAgICAgPyB0aGlzLnNvcnRlZENhY2hlS2V5c1trZXlJbmRleCArIDFdXG4gICAgICAgICAgOiB2b2lkIDA7XG4gICAgICB0aGlzLmNhY2hlc1trZXldID0gY2FjaGU7XG4gICAgICB0aGlzLm9uTmV3Q2FjaGUoa2V5LCBjYWNoZSwgaW5zZXJ0QmVmb3JlTWVkaWEpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jYWNoZXNba2V5XTtcbiAgfVxuXG4gIGdldFNvcnRlZENhY2hlS2V5cygpIHtcbiAgICByZXR1cm4gdGhpcy5zb3J0ZWRDYWNoZUtleXM7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENhY2hlPFQ+IHtcbiAgY2FjaGU6IHtcbiAgICBbeDogc3RyaW5nXTogc3RyaW5nO1xuICB9O1xuICBpZEdlbmVyYXRvcjogU2VxdWVudGlhbElER2VuZXJhdG9yO1xuICBrZXk6IHN0cmluZztcbiAgb25OZXdWYWx1ZTogKGNhY2hlOiBDYWNoZTxUPiwgaWQ6IHN0cmluZywgdmFsdWU6IGFueSkgPT4gYW55O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGlkR2VuZXJhdG9yOiBTZXF1ZW50aWFsSURHZW5lcmF0b3IsXG4gICAgb25OZXdWYWx1ZTogKGNhY2hlOiBDYWNoZTxUPiwgaWQ6IHN0cmluZywgdmFsdWU6IGFueSkgPT4gYW55LFxuICApIHtcbiAgICB0aGlzLmNhY2hlID0ge307XG4gICAgdGhpcy5pZEdlbmVyYXRvciA9IGlkR2VuZXJhdG9yO1xuICAgIHRoaXMub25OZXdWYWx1ZSA9IG9uTmV3VmFsdWU7XG4gIH1cblxuICBhZGRWYWx1ZShrZXk6IHN0cmluZywgdmFsdWU6IFQpIHtcbiAgICBjb25zdCBjYWNoZWQgPSB0aGlzLmNhY2hlW2tleV07XG4gICAgaWYgKGNhY2hlZCkge1xuICAgICAgcmV0dXJuIGNhY2hlZDtcbiAgICB9XG4gICAgY29uc3QgaWQgPSB0aGlzLmlkR2VuZXJhdG9yLm5leHQoKTtcbiAgICB0aGlzLmNhY2hlW2tleV0gPSBpZDtcbiAgICB0aGlzLm9uTmV3VmFsdWUodGhpcywgaWQsIHZhbHVlKTtcbiAgICByZXR1cm4gaWQ7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EscUJBQVAsTUFBa0MsMkJBQWxDO0FBQ0EsT0FBT0MsTUFBUCxNQUFtQiwwQkFBbkI7QUFTQSxPQUFPLE1BQU1DLFVBQU4sQ0FBb0I7RUFTekJDLFdBQVcsQ0FDVEMsV0FEUyxFQUVUQyxVQUZTLEVBR1RDLFVBSFMsRUFJVDtJQUNBLEtBQUtGLFdBQUwsR0FBbUJBLFdBQW5CO0lBQ0EsS0FBS0MsVUFBTCxHQUFrQkEsVUFBbEI7SUFDQSxLQUFLQyxVQUFMLEdBQWtCQSxVQUFsQjtJQUNBLEtBQUtDLGVBQUwsR0FBdUIsRUFBdkI7SUFDQSxLQUFLQyxNQUFMLEdBQWMsRUFBZDtFQUNEOztFQUVEQyxRQUFRLENBQUNDLEdBQUQsRUFBd0I7SUFDOUIsSUFBSSxDQUFDLEtBQUtGLE1BQUwsQ0FBWUUsR0FBWixDQUFMLEVBQXVCO01BQ3JCLE1BQU1DLEtBQUssR0FBRyxJQUFJQyxLQUFKLENBQVUsS0FBS1IsV0FBZixFQUE0QixLQUFLRSxVQUFqQyxDQUFkO01BQ0FLLEtBQUssQ0FBQ0QsR0FBTixHQUFZQSxHQUFaO01BQ0EsS0FBS0gsZUFBTCxDQUFxQk0sSUFBckIsQ0FBMEJILEdBQTFCO01BQ0EsS0FBS0gsZUFBTCxDQUFxQk8sSUFBckIsQ0FBMEJiLE1BQTFCO01BQ0EsTUFBTWMsUUFBUSxHQUFHLEtBQUtSLGVBQUwsQ0FBcUJTLE9BQXJCLENBQTZCTixHQUE3QixDQUFqQjtNQUNBLE1BQU1PLGlCQUFpQixHQUNyQkYsUUFBUSxHQUFHLEtBQUtSLGVBQUwsQ0FBcUJXLE1BQXJCLEdBQThCLENBQXpDLEdBQ0ksS0FBS1gsZUFBTCxDQUFxQlEsUUFBUSxHQUFHLENBQWhDLENBREosR0FFSSxLQUFLLENBSFg7TUFJQSxLQUFLUCxNQUFMLENBQVlFLEdBQVosSUFBbUJDLEtBQW5CO01BQ0EsS0FBS04sVUFBTCxDQUFnQkssR0FBaEIsRUFBcUJDLEtBQXJCLEVBQTRCTSxpQkFBNUI7SUFDRDs7SUFDRCxPQUFPLEtBQUtULE1BQUwsQ0FBWUUsR0FBWixDQUFQO0VBQ0Q7O0VBRURTLGtCQUFrQixHQUFHO0lBQ25CLE9BQU8sS0FBS1osZUFBWjtFQUNEOztBQXhDd0I7QUEyQzNCLE9BQU8sTUFBTUssS0FBTixDQUFlO0VBUXBCVCxXQUFXLENBQ1RDLFdBRFMsRUFFVEUsVUFGUyxFQUdUO0lBQ0EsS0FBS0ssS0FBTCxHQUFhLEVBQWI7SUFDQSxLQUFLUCxXQUFMLEdBQW1CQSxXQUFuQjtJQUNBLEtBQUtFLFVBQUwsR0FBa0JBLFVBQWxCO0VBQ0Q7O0VBRURjLFFBQVEsQ0FBQ1YsR0FBRCxFQUFjVyxLQUFkLEVBQXdCO0lBQzlCLE1BQU1DLE1BQU0sR0FBRyxLQUFLWCxLQUFMLENBQVdELEdBQVgsQ0FBZjs7SUFDQSxJQUFJWSxNQUFKLEVBQVk7TUFDVixPQUFPQSxNQUFQO0lBQ0Q7O0lBQ0QsTUFBTUMsRUFBRSxHQUFHLEtBQUtuQixXQUFMLENBQWlCb0IsSUFBakIsRUFBWDtJQUNBLEtBQUtiLEtBQUwsQ0FBV0QsR0FBWCxJQUFrQmEsRUFBbEI7SUFDQSxLQUFLakIsVUFBTCxDQUFnQixJQUFoQixFQUFzQmlCLEVBQXRCLEVBQTBCRixLQUExQjtJQUNBLE9BQU9FLEVBQVA7RUFDRDs7QUExQm1CIn0=