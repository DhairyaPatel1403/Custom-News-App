import Styletron from "../server";
test("StyletronServer toCss", () => {
  const styletron = new Styletron();
  expect(styletron.getCss()).toBe("");
  injectFixtureStyles(styletron);
  expect(styletron.getCss()).toBe(".ae{color:red}.af{color:green}.aj:hover{display:none}.ak{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.al{display:-webkit-box;display:-moz-box;display:-ms-flexbox;display:-webkit-flex;display:flex}@media (min-width: 600px){.ah{color:red}}@media (min-width: 800px){.ag{color:green}.ai:hover{color:green}}");
  injectFixtureStyles(styletron);
  expect(styletron.getCss()).toBe(".ae{color:red}.af{color:green}.aj:hover{display:none}.ak{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.al{display:-webkit-box;display:-moz-box;display:-ms-flexbox;display:-webkit-flex;display:flex}@media (min-width: 600px){.ah{color:red}}@media (min-width: 800px){.ag{color:green}.ai:hover{color:green}}");
  injectFixtureKeyframes(styletron);
  expect(styletron.getCss()).toBe("@keyframes ae{from{color:purple}50%{color:yellow}to{color:orange}}.ae{color:red}.af{color:green}.aj:hover{display:none}.ak{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.al{display:-webkit-box;display:-moz-box;display:-ms-flexbox;display:-webkit-flex;display:flex}@media (min-width: 600px){.ah{color:red}}@media (min-width: 800px){.ag{color:green}.ai:hover{color:green}}");
});
test("StyletronServer getStylesheets", () => {
  const styletron = new Styletron();
  expect(styletron.getStylesheets()).toEqual([{
    css: "",
    attrs: {}
  }]);
  injectFixtureStyles(styletron);
  expect(styletron.getStylesheets()).toEqual([{
    css: ".ae{color:red}.af{color:green}.aj:hover{display:none}.ak{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.al{display:-webkit-box;display:-moz-box;display:-ms-flexbox;display:-webkit-flex;display:flex}",
    attrs: {}
  }, {
    css: ".ah{color:red}",
    attrs: {
      media: "(min-width: 600px)"
    }
  }, {
    css: ".ag{color:green}.ai:hover{color:green}",
    attrs: {
      media: "(min-width: 800px)"
    }
  }]);
  injectFixtureKeyframes(styletron);
  expect(styletron.getStylesheets()).toEqual([{
    css: "@keyframes ae{from{color:purple}50%{color:yellow}to{color:orange}}",
    attrs: {
      "data-hydrate": "keyframes"
    }
  }, {
    css: ".ae{color:red}.af{color:green}.aj:hover{display:none}.ak{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.al{display:-webkit-box;display:-moz-box;display:-ms-flexbox;display:-webkit-flex;display:flex}",
    attrs: {}
  }, {
    css: ".ah{color:red}",
    attrs: {
      media: "(min-width: 600px)"
    }
  }, {
    css: ".ag{color:green}.ai:hover{color:green}",
    attrs: {
      media: "(min-width: 800px)"
    }
  }]);
  injectFixtureFontFace(styletron);
  expect(styletron.getStylesheets()).toEqual([{
    css: "@keyframes ae{from{color:purple}50%{color:yellow}to{color:orange}}",
    attrs: {
      "data-hydrate": "keyframes"
    }
  }, {
    css: "@font-face{font-family:ae;src:local('Roboto')}",
    attrs: {
      "data-hydrate": "font-face"
    }
  }, {
    css: ".ae{color:red}.af{color:green}.aj:hover{display:none}.ak{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.al{display:-webkit-box;display:-moz-box;display:-ms-flexbox;display:-webkit-flex;display:flex}",
    attrs: {}
  }, {
    css: ".ah{color:red}",
    attrs: {
      media: "(min-width: 600px)"
    }
  }, {
    css: ".ag{color:green}.ai:hover{color:green}",
    attrs: {
      media: "(min-width: 800px)"
    }
  }]);
});
test("StyletronServer getStylesheetsHtml ", () => {
  const styletron = new Styletron();
  expect(styletron.getStylesheetsHtml()).toBe('<style class="_styletron_hydrate_"></style>');
  injectFixtureStyles(styletron);
  expect(styletron.getStylesheetsHtml()).toBe('<style class="_styletron_hydrate_">.ae{color:red}.af{color:green}.aj:hover{display:none}.ak{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.al{display:-webkit-box;display:-moz-box;display:-ms-flexbox;display:-webkit-flex;display:flex}</style><style class="_styletron_hydrate_" media="(min-width: 600px)">.ah{color:red}</style><style class="_styletron_hydrate_" media="(min-width: 800px)">.ag{color:green}.ai:hover{color:green}</style>');
  injectFixtureKeyframes(styletron);
  expect(styletron.getStylesheetsHtml()).toBe('<style class="_styletron_hydrate_" data-hydrate="keyframes">@keyframes ae{from{color:purple}50%{color:yellow}to{color:orange}}</style><style class="_styletron_hydrate_">.ae{color:red}.af{color:green}.aj:hover{display:none}.ak{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.al{display:-webkit-box;display:-moz-box;display:-ms-flexbox;display:-webkit-flex;display:flex}</style><style class="_styletron_hydrate_" media="(min-width: 600px)">.ah{color:red}</style><style class="_styletron_hydrate_" media="(min-width: 800px)">.ag{color:green}.ai:hover{color:green}</style>');
  injectFixtureFontFace(styletron);
  expect(styletron.getStylesheetsHtml()).toBe('<style class="_styletron_hydrate_" data-hydrate="keyframes">@keyframes ae{from{color:purple}50%{color:yellow}to{color:orange}}</style><style class="_styletron_hydrate_" data-hydrate="font-face">@font-face{font-family:ae;src:local(\'Roboto\')}</style><style class="_styletron_hydrate_">.ae{color:red}.af{color:green}.aj:hover{display:none}.ak{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.al{display:-webkit-box;display:-moz-box;display:-ms-flexbox;display:-webkit-flex;display:flex}</style><style class="_styletron_hydrate_" media="(min-width: 600px)">.ah{color:red}</style><style class="_styletron_hydrate_" media="(min-width: 800px)">.ag{color:green}.ai:hover{color:green}</style>');
});
test("StyletronServer prefix option", () => {
  const styletron = new Styletron({
    prefix: "foo_"
  });
  expect(styletron.renderStyle({
    color: "red"
  })).toBe("foo_ae");
  expect(injectFixtureFontFace(styletron)).toBe("foo_ae");
  expect(injectFixtureKeyframes(styletron)).toBe("foo_ae");
  expect(styletron.getStylesheets()).toEqual([{
    css: "@keyframes foo_ae{from{color:purple}50%{color:yellow}to{color:orange}}",
    attrs: {
      "data-hydrate": "keyframes"
    }
  }, {
    css: "@font-face{font-family:foo_ae;src:local('Roboto')}",
    attrs: {
      "data-hydrate": "font-face"
    }
  }, {
    css: ".foo_ae{color:red}",
    attrs: {}
  }]);
});

function injectFixtureStyles(styletron) {
  styletron.renderStyle({
    color: "red"
  });
  styletron.renderStyle({
    color: "green"
  });
  styletron.renderStyle({
    "@media (min-width: 800px)": {
      color: "green"
    }
  }); // should be added before "min-width: 800px" query
  // test that Styletron properly sort media queries

  styletron.renderStyle({
    "@media (min-width: 600px)": {
      color: "red"
    }
  });
  styletron.renderStyle({
    "@media (min-width: 800px)": {
      ":hover": {
        color: "green"
      }
    }
  });
  styletron.renderStyle({
    zIndex: void 0 // Should be silently ignored

  });
  styletron.renderStyle({
    // null values were historically supported (albeit erronesouly)
    opacity: null // Should be silently ignored

  });
  styletron.renderStyle({
    ":hover": {
      display: "none"
    }
  });
  styletron.renderStyle({
    userSelect: "none"
  });
  styletron.renderStyle({
    display: "flex"
  });
}

function injectFixtureKeyframes(styletron) {
  return styletron.renderKeyframes({
    from: {
      color: "purple"
    },
    "50%": {
      color: "yellow"
    },
    to: {
      color: "orange"
    }
  });
}

function injectFixtureFontFace(styletron) {
  return styletron.renderFontFace({
    src: "local('Roboto')"
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTdHlsZXRyb24iLCJ0ZXN0Iiwic3R5bGV0cm9uIiwiZXhwZWN0IiwiZ2V0Q3NzIiwidG9CZSIsImluamVjdEZpeHR1cmVTdHlsZXMiLCJpbmplY3RGaXh0dXJlS2V5ZnJhbWVzIiwiZ2V0U3R5bGVzaGVldHMiLCJ0b0VxdWFsIiwiY3NzIiwiYXR0cnMiLCJtZWRpYSIsImluamVjdEZpeHR1cmVGb250RmFjZSIsImdldFN0eWxlc2hlZXRzSHRtbCIsInByZWZpeCIsInJlbmRlclN0eWxlIiwiY29sb3IiLCJ6SW5kZXgiLCJvcGFjaXR5IiwiZGlzcGxheSIsInVzZXJTZWxlY3QiLCJyZW5kZXJLZXlmcmFtZXMiLCJmcm9tIiwidG8iLCJyZW5kZXJGb250RmFjZSIsInNyYyJdLCJzb3VyY2VzIjpbInNyYy9zZXJ2ZXIvX190ZXN0c19fL3Rlc3RzLm5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFN0eWxldHJvbiBmcm9tIFwiLi4vc2VydmVyXCI7XG5cbnRlc3QoXCJTdHlsZXRyb25TZXJ2ZXIgdG9Dc3NcIiwgKCkgPT4ge1xuICBjb25zdCBzdHlsZXRyb24gPSBuZXcgU3R5bGV0cm9uKCk7XG4gIGV4cGVjdChzdHlsZXRyb24uZ2V0Q3NzKCkpLnRvQmUoXCJcIik7XG5cbiAgaW5qZWN0Rml4dHVyZVN0eWxlcyhzdHlsZXRyb24pO1xuICBleHBlY3Qoc3R5bGV0cm9uLmdldENzcygpKS50b0JlKFxuICAgIFwiLmFle2NvbG9yOnJlZH0uYWZ7Y29sb3I6Z3JlZW59LmFqOmhvdmVye2Rpc3BsYXk6bm9uZX0uYWt7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lfS5hbHtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1vei1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5Oi13ZWJraXQtZmxleDtkaXNwbGF5OmZsZXh9QG1lZGlhIChtaW4td2lkdGg6IDYwMHB4KXsuYWh7Y29sb3I6cmVkfX1AbWVkaWEgKG1pbi13aWR0aDogODAwcHgpey5hZ3tjb2xvcjpncmVlbn0uYWk6aG92ZXJ7Y29sb3I6Z3JlZW59fVwiLFxuICApO1xuXG4gIGluamVjdEZpeHR1cmVTdHlsZXMoc3R5bGV0cm9uKTtcbiAgZXhwZWN0KHN0eWxldHJvbi5nZXRDc3MoKSkudG9CZShcbiAgICBcIi5hZXtjb2xvcjpyZWR9LmFme2NvbG9yOmdyZWVufS5hajpob3ZlcntkaXNwbGF5Om5vbmV9LmFrey13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7LW1zLXVzZXItc2VsZWN0Om5vbmU7dXNlci1zZWxlY3Q6bm9uZX0uYWx7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tb3otYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTotd2Via2l0LWZsZXg7ZGlzcGxheTpmbGV4fUBtZWRpYSAobWluLXdpZHRoOiA2MDBweCl7LmFoe2NvbG9yOnJlZH19QG1lZGlhIChtaW4td2lkdGg6IDgwMHB4KXsuYWd7Y29sb3I6Z3JlZW59LmFpOmhvdmVye2NvbG9yOmdyZWVufX1cIixcbiAgKTtcblxuICBpbmplY3RGaXh0dXJlS2V5ZnJhbWVzKHN0eWxldHJvbik7XG4gIGV4cGVjdChzdHlsZXRyb24uZ2V0Q3NzKCkpLnRvQmUoXG4gICAgXCJAa2V5ZnJhbWVzIGFle2Zyb217Y29sb3I6cHVycGxlfTUwJXtjb2xvcjp5ZWxsb3d9dG97Y29sb3I6b3JhbmdlfX0uYWV7Y29sb3I6cmVkfS5hZntjb2xvcjpncmVlbn0uYWo6aG92ZXJ7ZGlzcGxheTpub25lfS5ha3std2Via2l0LXVzZXItc2VsZWN0Om5vbmU7LW1vei11c2VyLXNlbGVjdDpub25lOy1tcy11c2VyLXNlbGVjdDpub25lO3VzZXItc2VsZWN0Om5vbmV9LmFse2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbW96LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6LXdlYmtpdC1mbGV4O2Rpc3BsYXk6ZmxleH1AbWVkaWEgKG1pbi13aWR0aDogNjAwcHgpey5haHtjb2xvcjpyZWR9fUBtZWRpYSAobWluLXdpZHRoOiA4MDBweCl7LmFne2NvbG9yOmdyZWVufS5haTpob3Zlcntjb2xvcjpncmVlbn19XCIsXG4gICk7XG59KTtcblxudGVzdChcIlN0eWxldHJvblNlcnZlciBnZXRTdHlsZXNoZWV0c1wiLCAoKSA9PiB7XG4gIGNvbnN0IHN0eWxldHJvbiA9IG5ldyBTdHlsZXRyb24oKTtcbiAgZXhwZWN0KHN0eWxldHJvbi5nZXRTdHlsZXNoZWV0cygpKS50b0VxdWFsKFt7Y3NzOiBcIlwiLCBhdHRyczoge319XSk7XG5cbiAgaW5qZWN0Rml4dHVyZVN0eWxlcyhzdHlsZXRyb24pO1xuICBleHBlY3Qoc3R5bGV0cm9uLmdldFN0eWxlc2hlZXRzKCkpLnRvRXF1YWwoW1xuICAgIHtcbiAgICAgIGNzczogXCIuYWV7Y29sb3I6cmVkfS5hZntjb2xvcjpncmVlbn0uYWo6aG92ZXJ7ZGlzcGxheTpub25lfS5ha3std2Via2l0LXVzZXItc2VsZWN0Om5vbmU7LW1vei11c2VyLXNlbGVjdDpub25lOy1tcy11c2VyLXNlbGVjdDpub25lO3VzZXItc2VsZWN0Om5vbmV9LmFse2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbW96LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6LXdlYmtpdC1mbGV4O2Rpc3BsYXk6ZmxleH1cIixcbiAgICAgIGF0dHJzOiB7fSxcbiAgICB9LFxuICAgIHtjc3M6IFwiLmFoe2NvbG9yOnJlZH1cIiwgYXR0cnM6IHttZWRpYTogXCIobWluLXdpZHRoOiA2MDBweClcIn19LFxuICAgIHtcbiAgICAgIGNzczogXCIuYWd7Y29sb3I6Z3JlZW59LmFpOmhvdmVye2NvbG9yOmdyZWVufVwiLFxuICAgICAgYXR0cnM6IHttZWRpYTogXCIobWluLXdpZHRoOiA4MDBweClcIn0sXG4gICAgfSxcbiAgXSk7XG5cbiAgaW5qZWN0Rml4dHVyZUtleWZyYW1lcyhzdHlsZXRyb24pO1xuICBleHBlY3Qoc3R5bGV0cm9uLmdldFN0eWxlc2hlZXRzKCkpLnRvRXF1YWwoW1xuICAgIHtcbiAgICAgIGNzczogXCJAa2V5ZnJhbWVzIGFle2Zyb217Y29sb3I6cHVycGxlfTUwJXtjb2xvcjp5ZWxsb3d9dG97Y29sb3I6b3JhbmdlfX1cIixcbiAgICAgIGF0dHJzOiB7XCJkYXRhLWh5ZHJhdGVcIjogXCJrZXlmcmFtZXNcIn0sXG4gICAgfSxcbiAgICB7XG4gICAgICBjc3M6IFwiLmFle2NvbG9yOnJlZH0uYWZ7Y29sb3I6Z3JlZW59LmFqOmhvdmVye2Rpc3BsYXk6bm9uZX0uYWt7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lfS5hbHtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1vei1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5Oi13ZWJraXQtZmxleDtkaXNwbGF5OmZsZXh9XCIsXG4gICAgICBhdHRyczoge30sXG4gICAgfSxcbiAgICB7Y3NzOiBcIi5haHtjb2xvcjpyZWR9XCIsIGF0dHJzOiB7bWVkaWE6IFwiKG1pbi13aWR0aDogNjAwcHgpXCJ9fSxcbiAgICB7XG4gICAgICBjc3M6IFwiLmFne2NvbG9yOmdyZWVufS5haTpob3Zlcntjb2xvcjpncmVlbn1cIixcbiAgICAgIGF0dHJzOiB7bWVkaWE6IFwiKG1pbi13aWR0aDogODAwcHgpXCJ9LFxuICAgIH0sXG4gIF0pO1xuXG4gIGluamVjdEZpeHR1cmVGb250RmFjZShzdHlsZXRyb24pO1xuICBleHBlY3Qoc3R5bGV0cm9uLmdldFN0eWxlc2hlZXRzKCkpLnRvRXF1YWwoW1xuICAgIHtcbiAgICAgIGNzczogXCJAa2V5ZnJhbWVzIGFle2Zyb217Y29sb3I6cHVycGxlfTUwJXtjb2xvcjp5ZWxsb3d9dG97Y29sb3I6b3JhbmdlfX1cIixcbiAgICAgIGF0dHJzOiB7XCJkYXRhLWh5ZHJhdGVcIjogXCJrZXlmcmFtZXNcIn0sXG4gICAgfSxcbiAgICB7XG4gICAgICBjc3M6IFwiQGZvbnQtZmFjZXtmb250LWZhbWlseTphZTtzcmM6bG9jYWwoJ1JvYm90bycpfVwiLFxuICAgICAgYXR0cnM6IHtcImRhdGEtaHlkcmF0ZVwiOiBcImZvbnQtZmFjZVwifSxcbiAgICB9LFxuICAgIHtcbiAgICAgIGNzczogXCIuYWV7Y29sb3I6cmVkfS5hZntjb2xvcjpncmVlbn0uYWo6aG92ZXJ7ZGlzcGxheTpub25lfS5ha3std2Via2l0LXVzZXItc2VsZWN0Om5vbmU7LW1vei11c2VyLXNlbGVjdDpub25lOy1tcy11c2VyLXNlbGVjdDpub25lO3VzZXItc2VsZWN0Om5vbmV9LmFse2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbW96LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6LXdlYmtpdC1mbGV4O2Rpc3BsYXk6ZmxleH1cIixcbiAgICAgIGF0dHJzOiB7fSxcbiAgICB9LFxuICAgIHtjc3M6IFwiLmFoe2NvbG9yOnJlZH1cIiwgYXR0cnM6IHttZWRpYTogXCIobWluLXdpZHRoOiA2MDBweClcIn19LFxuICAgIHtcbiAgICAgIGNzczogXCIuYWd7Y29sb3I6Z3JlZW59LmFpOmhvdmVye2NvbG9yOmdyZWVufVwiLFxuICAgICAgYXR0cnM6IHttZWRpYTogXCIobWluLXdpZHRoOiA4MDBweClcIn0sXG4gICAgfSxcbiAgXSk7XG59KTtcblxudGVzdChcIlN0eWxldHJvblNlcnZlciBnZXRTdHlsZXNoZWV0c0h0bWwgXCIsICgpID0+IHtcbiAgY29uc3Qgc3R5bGV0cm9uID0gbmV3IFN0eWxldHJvbigpO1xuICBleHBlY3Qoc3R5bGV0cm9uLmdldFN0eWxlc2hlZXRzSHRtbCgpKS50b0JlKFxuICAgICc8c3R5bGUgY2xhc3M9XCJfc3R5bGV0cm9uX2h5ZHJhdGVfXCI+PC9zdHlsZT4nLFxuICApO1xuXG4gIGluamVjdEZpeHR1cmVTdHlsZXMoc3R5bGV0cm9uKTtcbiAgZXhwZWN0KHN0eWxldHJvbi5nZXRTdHlsZXNoZWV0c0h0bWwoKSkudG9CZShcbiAgICAnPHN0eWxlIGNsYXNzPVwiX3N0eWxldHJvbl9oeWRyYXRlX1wiPi5hZXtjb2xvcjpyZWR9LmFme2NvbG9yOmdyZWVufS5hajpob3ZlcntkaXNwbGF5Om5vbmV9LmFrey13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7LW1zLXVzZXItc2VsZWN0Om5vbmU7dXNlci1zZWxlY3Q6bm9uZX0uYWx7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tb3otYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTotd2Via2l0LWZsZXg7ZGlzcGxheTpmbGV4fTwvc3R5bGU+PHN0eWxlIGNsYXNzPVwiX3N0eWxldHJvbl9oeWRyYXRlX1wiIG1lZGlhPVwiKG1pbi13aWR0aDogNjAwcHgpXCI+LmFoe2NvbG9yOnJlZH08L3N0eWxlPjxzdHlsZSBjbGFzcz1cIl9zdHlsZXRyb25faHlkcmF0ZV9cIiBtZWRpYT1cIihtaW4td2lkdGg6IDgwMHB4KVwiPi5hZ3tjb2xvcjpncmVlbn0uYWk6aG92ZXJ7Y29sb3I6Z3JlZW59PC9zdHlsZT4nLFxuICApO1xuXG4gIGluamVjdEZpeHR1cmVLZXlmcmFtZXMoc3R5bGV0cm9uKTtcbiAgZXhwZWN0KHN0eWxldHJvbi5nZXRTdHlsZXNoZWV0c0h0bWwoKSkudG9CZShcbiAgICAnPHN0eWxlIGNsYXNzPVwiX3N0eWxldHJvbl9oeWRyYXRlX1wiIGRhdGEtaHlkcmF0ZT1cImtleWZyYW1lc1wiPkBrZXlmcmFtZXMgYWV7ZnJvbXtjb2xvcjpwdXJwbGV9NTAle2NvbG9yOnllbGxvd310b3tjb2xvcjpvcmFuZ2V9fTwvc3R5bGU+PHN0eWxlIGNsYXNzPVwiX3N0eWxldHJvbl9oeWRyYXRlX1wiPi5hZXtjb2xvcjpyZWR9LmFme2NvbG9yOmdyZWVufS5hajpob3ZlcntkaXNwbGF5Om5vbmV9LmFrey13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7LW1zLXVzZXItc2VsZWN0Om5vbmU7dXNlci1zZWxlY3Q6bm9uZX0uYWx7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tb3otYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTotd2Via2l0LWZsZXg7ZGlzcGxheTpmbGV4fTwvc3R5bGU+PHN0eWxlIGNsYXNzPVwiX3N0eWxldHJvbl9oeWRyYXRlX1wiIG1lZGlhPVwiKG1pbi13aWR0aDogNjAwcHgpXCI+LmFoe2NvbG9yOnJlZH08L3N0eWxlPjxzdHlsZSBjbGFzcz1cIl9zdHlsZXRyb25faHlkcmF0ZV9cIiBtZWRpYT1cIihtaW4td2lkdGg6IDgwMHB4KVwiPi5hZ3tjb2xvcjpncmVlbn0uYWk6aG92ZXJ7Y29sb3I6Z3JlZW59PC9zdHlsZT4nLFxuICApO1xuXG4gIGluamVjdEZpeHR1cmVGb250RmFjZShzdHlsZXRyb24pO1xuICBleHBlY3Qoc3R5bGV0cm9uLmdldFN0eWxlc2hlZXRzSHRtbCgpKS50b0JlKFxuICAgICc8c3R5bGUgY2xhc3M9XCJfc3R5bGV0cm9uX2h5ZHJhdGVfXCIgZGF0YS1oeWRyYXRlPVwia2V5ZnJhbWVzXCI+QGtleWZyYW1lcyBhZXtmcm9te2NvbG9yOnB1cnBsZX01MCV7Y29sb3I6eWVsbG93fXRve2NvbG9yOm9yYW5nZX19PC9zdHlsZT48c3R5bGUgY2xhc3M9XCJfc3R5bGV0cm9uX2h5ZHJhdGVfXCIgZGF0YS1oeWRyYXRlPVwiZm9udC1mYWNlXCI+QGZvbnQtZmFjZXtmb250LWZhbWlseTphZTtzcmM6bG9jYWwoXFwnUm9ib3RvXFwnKX08L3N0eWxlPjxzdHlsZSBjbGFzcz1cIl9zdHlsZXRyb25faHlkcmF0ZV9cIj4uYWV7Y29sb3I6cmVkfS5hZntjb2xvcjpncmVlbn0uYWo6aG92ZXJ7ZGlzcGxheTpub25lfS5ha3std2Via2l0LXVzZXItc2VsZWN0Om5vbmU7LW1vei11c2VyLXNlbGVjdDpub25lOy1tcy11c2VyLXNlbGVjdDpub25lO3VzZXItc2VsZWN0Om5vbmV9LmFse2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbW96LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6LXdlYmtpdC1mbGV4O2Rpc3BsYXk6ZmxleH08L3N0eWxlPjxzdHlsZSBjbGFzcz1cIl9zdHlsZXRyb25faHlkcmF0ZV9cIiBtZWRpYT1cIihtaW4td2lkdGg6IDYwMHB4KVwiPi5haHtjb2xvcjpyZWR9PC9zdHlsZT48c3R5bGUgY2xhc3M9XCJfc3R5bGV0cm9uX2h5ZHJhdGVfXCIgbWVkaWE9XCIobWluLXdpZHRoOiA4MDBweClcIj4uYWd7Y29sb3I6Z3JlZW59LmFpOmhvdmVye2NvbG9yOmdyZWVufTwvc3R5bGU+JyxcbiAgKTtcbn0pO1xuXG50ZXN0KFwiU3R5bGV0cm9uU2VydmVyIHByZWZpeCBvcHRpb25cIiwgKCkgPT4ge1xuICBjb25zdCBzdHlsZXRyb24gPSBuZXcgU3R5bGV0cm9uKHtwcmVmaXg6IFwiZm9vX1wifSk7XG5cbiAgZXhwZWN0KHN0eWxldHJvbi5yZW5kZXJTdHlsZSh7Y29sb3I6IFwicmVkXCJ9KSkudG9CZShcImZvb19hZVwiKTtcbiAgZXhwZWN0KGluamVjdEZpeHR1cmVGb250RmFjZShzdHlsZXRyb24pKS50b0JlKFwiZm9vX2FlXCIpO1xuICBleHBlY3QoaW5qZWN0Rml4dHVyZUtleWZyYW1lcyhzdHlsZXRyb24pKS50b0JlKFwiZm9vX2FlXCIpO1xuXG4gIGV4cGVjdChzdHlsZXRyb24uZ2V0U3R5bGVzaGVldHMoKSkudG9FcXVhbChbXG4gICAge1xuICAgICAgY3NzOiBcIkBrZXlmcmFtZXMgZm9vX2Fle2Zyb217Y29sb3I6cHVycGxlfTUwJXtjb2xvcjp5ZWxsb3d9dG97Y29sb3I6b3JhbmdlfX1cIixcbiAgICAgIGF0dHJzOiB7XCJkYXRhLWh5ZHJhdGVcIjogXCJrZXlmcmFtZXNcIn0sXG4gICAgfSxcbiAgICB7XG4gICAgICBjc3M6IFwiQGZvbnQtZmFjZXtmb250LWZhbWlseTpmb29fYWU7c3JjOmxvY2FsKCdSb2JvdG8nKX1cIixcbiAgICAgIGF0dHJzOiB7XCJkYXRhLWh5ZHJhdGVcIjogXCJmb250LWZhY2VcIn0sXG4gICAgfSxcbiAgICB7Y3NzOiBcIi5mb29fYWV7Y29sb3I6cmVkfVwiLCBhdHRyczoge319LFxuICBdKTtcbn0pO1xuXG5mdW5jdGlvbiBpbmplY3RGaXh0dXJlU3R5bGVzKHN0eWxldHJvbikge1xuICBzdHlsZXRyb24ucmVuZGVyU3R5bGUoe2NvbG9yOiBcInJlZFwifSk7XG4gIHN0eWxldHJvbi5yZW5kZXJTdHlsZSh7Y29sb3I6IFwiZ3JlZW5cIn0pO1xuICBzdHlsZXRyb24ucmVuZGVyU3R5bGUoe1xuICAgIFwiQG1lZGlhIChtaW4td2lkdGg6IDgwMHB4KVwiOiB7XG4gICAgICBjb2xvcjogXCJncmVlblwiLFxuICAgIH0sXG4gIH0pO1xuICAvLyBzaG91bGQgYmUgYWRkZWQgYmVmb3JlIFwibWluLXdpZHRoOiA4MDBweFwiIHF1ZXJ5XG4gIC8vIHRlc3QgdGhhdCBTdHlsZXRyb24gcHJvcGVybHkgc29ydCBtZWRpYSBxdWVyaWVzXG4gIHN0eWxldHJvbi5yZW5kZXJTdHlsZSh7XG4gICAgXCJAbWVkaWEgKG1pbi13aWR0aDogNjAwcHgpXCI6IHtcbiAgICAgIGNvbG9yOiBcInJlZFwiLFxuICAgIH0sXG4gIH0pO1xuICBzdHlsZXRyb24ucmVuZGVyU3R5bGUoe1xuICAgIFwiQG1lZGlhIChtaW4td2lkdGg6IDgwMHB4KVwiOiB7XG4gICAgICBcIjpob3ZlclwiOiB7XG4gICAgICAgIGNvbG9yOiBcImdyZWVuXCIsXG4gICAgICB9LFxuICAgIH0sXG4gIH0pO1xuICBzdHlsZXRyb24ucmVuZGVyU3R5bGUoe1xuICAgIHpJbmRleDogdm9pZCAwLCAvLyBTaG91bGQgYmUgc2lsZW50bHkgaWdub3JlZFxuICB9KTtcbiAgc3R5bGV0cm9uLnJlbmRlclN0eWxlKHtcbiAgICAvLyBudWxsIHZhbHVlcyB3ZXJlIGhpc3RvcmljYWxseSBzdXBwb3J0ZWQgKGFsYmVpdCBlcnJvbmVzb3VseSlcbiAgICBvcGFjaXR5OiBudWxsLCAvLyBTaG91bGQgYmUgc2lsZW50bHkgaWdub3JlZFxuICB9KTtcbiAgc3R5bGV0cm9uLnJlbmRlclN0eWxlKHtcbiAgICBcIjpob3ZlclwiOiB7XG4gICAgICBkaXNwbGF5OiBcIm5vbmVcIixcbiAgICB9LFxuICB9KTtcbiAgc3R5bGV0cm9uLnJlbmRlclN0eWxlKHtcbiAgICB1c2VyU2VsZWN0OiBcIm5vbmVcIixcbiAgfSk7XG4gIHN0eWxldHJvbi5yZW5kZXJTdHlsZSh7XG4gICAgZGlzcGxheTogXCJmbGV4XCIsXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBpbmplY3RGaXh0dXJlS2V5ZnJhbWVzKHN0eWxldHJvbikge1xuICByZXR1cm4gc3R5bGV0cm9uLnJlbmRlcktleWZyYW1lcyh7XG4gICAgZnJvbToge1xuICAgICAgY29sb3I6IFwicHVycGxlXCIsXG4gICAgfSxcbiAgICBcIjUwJVwiOiB7XG4gICAgICBjb2xvcjogXCJ5ZWxsb3dcIixcbiAgICB9LFxuICAgIHRvOiB7XG4gICAgICBjb2xvcjogXCJvcmFuZ2VcIixcbiAgICB9LFxuICB9KTtcbn1cblxuZnVuY3Rpb24gaW5qZWN0Rml4dHVyZUZvbnRGYWNlKHN0eWxldHJvbikge1xuICByZXR1cm4gc3R5bGV0cm9uLnJlbmRlckZvbnRGYWNlKHtcbiAgICBzcmM6IFwibG9jYWwoJ1JvYm90bycpXCIsXG4gIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxTQUFQLE1BQXNCLFdBQXRCO0FBRUFDLElBQUksQ0FBQyx1QkFBRCxFQUEwQixNQUFNO0VBQ2xDLE1BQU1DLFNBQVMsR0FBRyxJQUFJRixTQUFKLEVBQWxCO0VBQ0FHLE1BQU0sQ0FBQ0QsU0FBUyxDQUFDRSxNQUFWLEVBQUQsQ0FBTixDQUEyQkMsSUFBM0IsQ0FBZ0MsRUFBaEM7RUFFQUMsbUJBQW1CLENBQUNKLFNBQUQsQ0FBbkI7RUFDQUMsTUFBTSxDQUFDRCxTQUFTLENBQUNFLE1BQVYsRUFBRCxDQUFOLENBQTJCQyxJQUEzQixDQUNFLHlWQURGO0VBSUFDLG1CQUFt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