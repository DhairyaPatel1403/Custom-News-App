{"ast":null,"code":"import * as React from 'react';\nimport { createSource, source } from \"./context\";\nimport { UID } from \"./UIDComponent\";\n/**\n * UID isolation component, required for SSR and testing.\n * Wrap your application with it to guarantee UID consistency between SSR and CSR.\n * @param {String} [prefix] - prefix for all generated ids\n * @example\n * <UIDReset>\n *    <App />\n * </UIDReset/>\n * @see https://github.com/thearnica/react-uid#server-side-friendly-uid\n */\nexport var UIDReset = function (_a) {\n  var children = _a.children,\n    _b = _a.prefix,\n    prefix = _b === void 0 ? '' : _b;\n  return React.createElement(source.Provider, {\n    value: createSource(prefix)\n  }, children);\n};\n/**\n * Creates a sub-ids for nested components, isolating from inside a branch.\n * Useful for self-contained elements or code splitting\n * @see https://github.com/thearnica/react-uid#code-splitting\n */\nexport var UIDFork = function (_a) {\n  var children = _a.children,\n    _b = _a.prefix,\n    prefix = _b === void 0 ? '' : _b;\n  return React.createElement(UIDConsumer, null, function (id) {\n    return React.createElement(source.Provider, {\n      value: createSource(id + '-' + prefix)\n    }, children);\n  });\n};\n/**\n * UID in form of renderProps. Supports nesting and SSR. Prefer {@link useUID} hook version if possible.\n * @see https://github.com/thearnica/react-uid#server-side-friendly-uid\n * @see https://github.com/thearnica/react-uid#react-components\n * @example\n * // get UID to connect label to input\n * <UIDConsumer>\n *   {(id)} => <label htmlFor={id}><input id={id}/>}\n * </UIDConsumer>\n *\n * // get uid to generate uid for a keys in a list\n * <UIDConsumer>\n *   {(, uid)} => items.map(item => <li key={uid(item) />)}\n * </UIDConsumer>\n *\n * @see {@link useUID} - a hook version of this component\n * @see {@link UID} - not SSR compatible version\n */\nexport var UIDConsumer = function (_a) {\n  var name = _a.name,\n    children = _a.children;\n  return React.createElement(source.Consumer, null, function (value) {\n    return React.createElement(UID, {\n      name: name,\n      idSource: value,\n      children: children\n    });\n  });\n};","map":{"version":3,"names":["React","createSource","source","UID","UIDReset","_a","children","_b","prefix","createElement","Provider","value","UIDFork","UIDConsumer","id","name","Consumer","idSource"],"sources":["C:/Users/Dhairya/Desktop/streamlit/template/streamlit_custom_slider/frontend/node_modules/react-uid/dist/es2015/Control.js"],"sourcesContent":["import * as React from 'react';\nimport { createSource, source } from \"./context\";\nimport { UID } from \"./UIDComponent\";\n/**\n * UID isolation component, required for SSR and testing.\n * Wrap your application with it to guarantee UID consistency between SSR and CSR.\n * @param {String} [prefix] - prefix for all generated ids\n * @example\n * <UIDReset>\n *    <App />\n * </UIDReset/>\n * @see https://github.com/thearnica/react-uid#server-side-friendly-uid\n */\nexport var UIDReset = function (_a) {\n    var children = _a.children, _b = _a.prefix, prefix = _b === void 0 ? '' : _b;\n    return (React.createElement(source.Provider, { value: createSource(prefix) }, children));\n};\n/**\n * Creates a sub-ids for nested components, isolating from inside a branch.\n * Useful for self-contained elements or code splitting\n * @see https://github.com/thearnica/react-uid#code-splitting\n */\nexport var UIDFork = function (_a) {\n    var children = _a.children, _b = _a.prefix, prefix = _b === void 0 ? '' : _b;\n    return (React.createElement(UIDConsumer, null, function (id) { return (React.createElement(source.Provider, { value: createSource(id + '-' + prefix) }, children)); }));\n};\n/**\n * UID in form of renderProps. Supports nesting and SSR. Prefer {@link useUID} hook version if possible.\n * @see https://github.com/thearnica/react-uid#server-side-friendly-uid\n * @see https://github.com/thearnica/react-uid#react-components\n * @example\n * // get UID to connect label to input\n * <UIDConsumer>\n *   {(id)} => <label htmlFor={id}><input id={id}/>}\n * </UIDConsumer>\n *\n * // get uid to generate uid for a keys in a list\n * <UIDConsumer>\n *   {(, uid)} => items.map(item => <li key={uid(item) />)}\n * </UIDConsumer>\n *\n * @see {@link useUID} - a hook version of this component\n * @see {@link UID} - not SSR compatible version\n */\nexport var UIDConsumer = function (_a) {\n    var name = _a.name, children = _a.children;\n    return (React.createElement(source.Consumer, null, function (value) { return (React.createElement(UID, { name: name, idSource: value, children: children })); }));\n};\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,YAAY,EAAEC,MAAM,QAAQ,WAAW;AAChD,SAASC,GAAG,QAAQ,gBAAgB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,QAAQ,GAAG,SAAAA,CAAUC,EAAE,EAAE;EAChC,IAAIC,QAAQ,GAAGD,EAAE,CAACC,QAAQ;IAAEC,EAAE,GAAGF,EAAE,CAACG,MAAM;IAAEA,MAAM,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAG,EAAE,GAAGA,EAAE;EAC5E,OAAQP,KAAK,CAACS,aAAa,CAACP,MAAM,CAACQ,QAAQ,EAAE;IAAEC,KAAK,EAAEV,YAAY,CAACO,MAAM;EAAE,CAAC,EAAEF,QAAQ,CAAC;AAC3F,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIM,OAAO,GAAG,SAAAA,CAAUP,EAAE,EAAE;EAC/B,IAAIC,QAAQ,GAAGD,EAAE,CAACC,QAAQ;IAAEC,EAAE,GAAGF,EAAE,CAACG,MAAM;IAAEA,MAAM,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAG,EAAE,GAAGA,EAAE;EAC5E,OAAQP,KAAK,CAACS,aAAa,CAACI,WAAW,EAAE,IAAI,EAAE,UAAUC,EAAE,EAAE;IAAE,OAAQd,KAAK,CAACS,aAAa,CAACP,MAAM,CAACQ,QAAQ,EAAE;MAAEC,KAAK,EAAEV,YAAY,CAACa,EAAE,GAAG,GAAG,GAAGN,MAAM;IAAE,CAAC,EAAEF,QAAQ,CAAC;EAAG,CAAC,CAAC;AAC1K,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIO,WAAW,GAAG,SAAAA,CAAUR,EAAE,EAAE;EACnC,IAAIU,IAAI,GAAGV,EAAE,CAACU,IAAI;IAAET,QAAQ,GAAGD,EAAE,CAACC,QAAQ;EAC1C,OAAQN,KAAK,CAACS,aAAa,CAACP,MAAM,CAACc,QAAQ,EAAE,IAAI,EAAE,UAAUL,KAAK,EAAE;IAAE,OAAQX,KAAK,CAACS,aAAa,CAACN,GAAG,EAAE;MAAEY,IAAI,EAAEA,IAAI;MAAEE,QAAQ,EAAEN,KAAK;MAAEL,QAAQ,EAAEA;IAAS,CAAC,CAAC;EAAG,CAAC,CAAC;AACpK,CAAC"},"metadata":{},"sourceType":"module"}