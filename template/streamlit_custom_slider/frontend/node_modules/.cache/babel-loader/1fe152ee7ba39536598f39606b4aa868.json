{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dhairya\\\\Desktop\\\\streamlit\\\\template\\\\streamlit_custom_slider\\\\frontend\\\\src\\\\CustomSlider.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Streamlit, withStreamlitConnection } from \"streamlit-component-lib\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CustomSlider = props => {\n  _s();\n  function fetchNewsDetails(query) {\n    const apiKey = \"YOUR_API_KEY\"; // Replace with your actual API key\n    const baseUrl = \"https://api.newsapi.com/v2\"; // Replace with the base URL of the news API\n\n    // Construct the request URL with the query parameter\n    const url = `${baseUrl}/articles?q=${query}&apiKey=${apiKey}`;\n\n    // Send the HTTP GET request using fetch()\n    fetch(url).then(response => {\n      // Check if the response was successful (status code 200)\n      if (response.ok) {\n        // Parse the response as JSON\n        return response.json();\n      } else {\n        // Handle the case when the response is not successful\n        throw new Error(`Error: ${response.status}`);\n      }\n    }).then(data => {\n      // Process the data as needed\n      // For example, log the titles of the news articles\n      for (const article of data.articles) {\n        console.log(article.title);\n      }\n    }).catch(error => {\n      // Handle any errors that occurred during the request\n      console.error(\"Error:\", error);\n    });\n  }\n  const Authorization = \"f13e245aad384f8f97e7fe525511ec8c\";\n  /**\n   * Destructuring JSON objects is a good habit.\n   * This will look for label, minValue and maxValue keys\n   * to store them in separate variables.\n   */\n  const {\n    label,\n    minValue,\n    maxValue,\n    label2\n  } = props.args;\n  const [value, setValue] = useState([10]);\n  useEffect(() => Streamlit.setFrameHeight());\n\n  // Add a label and pass min/max variables to the baseui Slider\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Name - \", label]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: maxValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Country - \", label2]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(CustomSlider, \"PityEIs2ZfVdYih7x1hrhDrAugM=\");\n_c = CustomSlider;\nexport default _c2 = withStreamlitConnection(CustomSlider);\nvar _c, _c2;\n$RefreshReg$(_c, \"CustomSlider\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useEffect","useState","Streamlit","withStreamlitConnection","jsxDEV","_jsxDEV","Fragment","_Fragment","CustomSlider","props","_s","fetchNewsDetails","query","apiKey","baseUrl","url","fetch","then","response","ok","json","Error","status","data","article","articles","console","log","title","catch","error","Authorization","label","minValue","maxValue","label2","args","value","setValue","setFrameHeight","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","_c2","$RefreshReg$"],"sources":["C:/Users/Dhairya/Desktop/streamlit/template/streamlit_custom_slider/frontend/src/CustomSlider.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  ComponentProps,\n  Streamlit,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\";\nimport { Slider } from \"baseui/slider\";\n\n\n\nconst CustomSlider = (props: ComponentProps) => {\n\n\n  function fetchNewsDetails(query: any) {\n    const apiKey = \"YOUR_API_KEY\"; // Replace with your actual API key\n    const baseUrl = \"https://api.newsapi.com/v2\"; // Replace with the base URL of the news API\n  \n    // Construct the request URL with the query parameter\n    const url = `${baseUrl}/articles?q=${query}&apiKey=${apiKey}`;\n  \n    // Send the HTTP GET request using fetch()\n    fetch(url)\n      .then(response => {\n        // Check if the response was successful (status code 200)\n        if (response.ok) {\n          // Parse the response as JSON\n          return response.json();\n        } else {\n          // Handle the case when the response is not successful\n          throw new Error(`Error: ${response.status}`);\n        }\n      })\n      .then(data => {\n        // Process the data as needed\n        // For example, log the titles of the news articles\n        for (const article of data.articles) {\n          console.log(article.title);\n        }\n      })\n      .catch(error => {\n        // Handle any errors that occurred during the request\n        console.error(\"Error:\", error);\n      });\n  }\n\n  \n\n\n  \n  const Authorization = \"f13e245aad384f8f97e7fe525511ec8c\"\n  /**\n   * Destructuring JSON objects is a good habit.\n   * This will look for label, minValue and maxValue keys\n   * to store them in separate variables.\n   */\n  const { label, minValue, maxValue, label2 } = props.args;\n\n  const [value, setValue] = useState([10]);\n\n  useEffect(() => Streamlit.setFrameHeight());\n\n  // Add a label and pass min/max variables to the baseui Slider\n  return (\n    <>\n      <h1>Name - {label}</h1>\n      <h2>{maxValue}</h2>\n\n      <h3>Country - {label2}</h3>\n    </>\n  );\n};\n\nexport default withStreamlitConnection(CustomSlider);"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAEEC,SAAS,EACTC,uBAAuB,QAClB,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAKjC,MAAMC,YAAY,GAAIC,KAAqB,IAAK;EAAAC,EAAA;EAG9C,SAASC,gBAAgBA,CAACC,KAAU,EAAE;IACpC,MAAMC,MAAM,GAAG,cAAc,CAAC,CAAC;IAC/B,MAAMC,OAAO,GAAG,4BAA4B,CAAC,CAAC;;IAE9C;IACA,MAAMC,GAAG,GAAI,GAAED,OAAQ,eAAcF,KAAM,WAAUC,MAAO,EAAC;;IAE7D;IACAG,KAAK,CAACD,GAAG,CAAC,CACPE,IAAI,CAACC,QAAQ,IAAI;MAChB;MACA,IAAIA,QAAQ,CAACC,EAAE,EAAE;QACf;QACA,OAAOD,QAAQ,CAACE,IAAI,CAAC,CAAC;MACxB,CAAC,MAAM;QACL;QACA,MAAM,IAAIC,KAAK,CAAE,UAASH,QAAQ,CAACI,MAAO,EAAC,CAAC;MAC9C;IACF,CAAC,CAAC,CACDL,IAAI,CAACM,IAAI,IAAI;MACZ;MACA;MACA,KAAK,MAAMC,OAAO,IAAID,IAAI,CAACE,QAAQ,EAAE;QACnCC,OAAO,CAACC,GAAG,CAACH,OAAO,CAACI,KAAK,CAAC;MAC5B;IACF,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;MACd;MACAJ,OAAO,CAACI,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAChC,CAAC,CAAC;EACN;EAMA,MAAMC,aAAa,GAAG,kCAAkC;EACxD;AACF;AACA;AACA;AACA;EACE,MAAM;IAAEC,KAAK;IAAEC,QAAQ;IAAEC,QAAQ;IAAEC;EAAO,CAAC,GAAG1B,KAAK,CAAC2B,IAAI;EAExD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGrC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;EAExCD,SAAS,CAAC,MAAME,SAAS,CAACqC,cAAc,CAAC,CAAC,CAAC;;EAE3C;EACA,oBACElC,OAAA,CAAAE,SAAA;IAAAiC,QAAA,gBACEnC,OAAA;MAAAmC,QAAA,GAAI,SAAO,EAACR,KAAK;IAAA;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACvBvC,OAAA;MAAAmC,QAAA,EAAKN;IAAQ;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAEnBvC,OAAA;MAAAmC,QAAA,GAAI,YAAU,EAACL,MAAM;IAAA;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA,eAC3B,CAAC;AAEP,CAAC;AAAClC,EAAA,CA5DIF,YAAY;AAAAqC,EAAA,GAAZrC,YAAY;AA8DlB,eAAAsC,GAAA,GAAe3C,uBAAuB,CAACK,YAAY,CAAC;AAAC,IAAAqC,EAAA,EAAAC,GAAA;AAAAC,YAAA,CAAAF,EAAA;AAAAE,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module"}