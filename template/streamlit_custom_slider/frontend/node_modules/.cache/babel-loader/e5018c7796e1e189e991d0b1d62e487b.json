{"ast":null,"code":"import SequentialIDGenerator from \"../sequential-id-generator\";\nimport { Cache, MultiCache } from \"../cache\";\nimport injectStylePrefixed from \"../inject-style-prefixed\";\nimport { styleBlockToRule, atomicSelector, keyframesBlockToRule, declarationsToBlock, keyframesToBlock, fontFaceBlockToRule } from \"../css\";\nclass StyletronServer {\n  constructor() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.styleRules = {\n      \"\": \"\"\n    };\n    this.styleCache = new MultiCache(new SequentialIDGenerator(opts.prefix), media => {\n      this.styleRules[media] = \"\";\n    }, (cache, id, value) => {\n      const {\n        pseudo,\n        block\n      } = value;\n      this.styleRules[cache.key] += styleBlockToRule(atomicSelector(id, pseudo), block);\n    });\n    this.fontFaceRules = \"\";\n    this.fontFaceCache = new Cache(new SequentialIDGenerator(opts.prefix), (cache, id, value) => {\n      this.fontFaceRules += fontFaceBlockToRule(id, declarationsToBlock(value));\n    });\n    this.keyframesRules = \"\";\n    this.keyframesCache = new Cache(new SequentialIDGenerator(opts.prefix), (cache, id, value) => {\n      this.keyframesRules += keyframesBlockToRule(id, keyframesToBlock(value));\n    });\n  }\n  renderStyle(style) {\n    return injectStylePrefixed(this.styleCache, style, \"\", \"\");\n  }\n  renderFontFace(fontFace) {\n    const key = JSON.stringify(fontFace);\n    return this.fontFaceCache.addValue(key, fontFace);\n  }\n  renderKeyframes(keyframes) {\n    const key = JSON.stringify(keyframes);\n    return this.keyframesCache.addValue(key, keyframes);\n  }\n  getStylesheets() {\n    return [...(this.keyframesRules.length ? [{\n      css: this.keyframesRules,\n      attrs: {\n        \"data-hydrate\": \"keyframes\"\n      }\n    }] : []), ...(this.fontFaceRules.length ? [{\n      css: this.fontFaceRules,\n      attrs: {\n        \"data-hydrate\": \"font-face\"\n      }\n    }] : []), ...sheetify(this.styleRules, this.styleCache.getSortedCacheKeys())];\n  }\n  getStylesheetsHtml() {\n    let className = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"_styletron_hydrate_\";\n    return generateHtmlString(this.getStylesheets(), className);\n  }\n  getCss() {\n    return this.keyframesRules + this.fontFaceRules + stringify(this.styleRules, this.styleCache.getSortedCacheKeys());\n  }\n}\nexport function generateHtmlString(sheets, className) {\n  let html = \"\";\n  for (let i = 0; i < sheets.length; i++) {\n    const sheet = sheets[i];\n    const {\n      class: originalClassName,\n      ...rest\n    } = sheet.attrs;\n    const attrs = {\n      class: originalClassName ? `${className} ${originalClassName}` : className,\n      ...rest\n    };\n    html += `<style${attrsToString(attrs)}>${sheet.css}</style>`;\n  }\n  return html;\n}\nfunction attrsToString(attrs) {\n  let result = \"\";\n  for (const attr in attrs) {\n    const value = attrs[attr];\n    if (value === true) {\n      result += \" \" + attr;\n    } else if (value !== false) {\n      result += ` ${attr}=\"${value}\"`;\n    }\n  }\n  return result;\n}\nfunction stringify(styleRules, sortedCacheKeys) {\n  let result = \"\";\n  sortedCacheKeys.forEach(cacheKey => {\n    const rules = styleRules[cacheKey];\n    if (cacheKey !== \"\") {\n      result += `@media ${cacheKey}{${rules}}`;\n    } else {\n      result += rules;\n    }\n  });\n  return result;\n}\nfunction sheetify(styleRules, sortedCacheKeys) {\n  if (sortedCacheKeys.length === 0) {\n    return [{\n      css: \"\",\n      attrs: {}\n    }];\n  }\n  const sheets = [];\n  sortedCacheKeys.forEach(cacheKey => {\n    // omit media (cacheKey) attribute if empty\n    const attrs = cacheKey === \"\" ? {} : {\n      media: cacheKey\n    };\n    sheets.push({\n      css: styleRules[cacheKey],\n      attrs\n    });\n  });\n  return sheets;\n}\nexport default StyletronServer;","map":{"version":3,"names":["SequentialIDGenerator","Cache","MultiCache","injectStylePrefixed","styleBlockToRule","atomicSelector","keyframesBlockToRule","declarationsToBlock","keyframesToBlock","fontFaceBlockToRule","StyletronServer","constructor","opts","arguments","length","undefined","styleRules","styleCache","prefix","media","cache","id","value","pseudo","block","key","fontFaceRules","fontFaceCache","keyframesRules","keyframesCache","renderStyle","style","renderFontFace","fontFace","JSON","stringify","addValue","renderKeyframes","keyframes","getStylesheets","css","attrs","sheetify","getSortedCacheKeys","getStylesheetsHtml","className","generateHtmlString","getCss","sheets","html","i","sheet","class","originalClassName","rest","attrsToString","result","attr","sortedCacheKeys","forEach","cacheKey","rules","push"],"sources":["src/server/server.ts"],"sourcesContent":["import SequentialIDGenerator from \"../sequential-id-generator\";\n\nimport type {StandardEngine} from \"styletron-standard\";\n\nimport {Cache, MultiCache} from \"../cache\";\n\nimport injectStylePrefixed from \"../inject-style-prefixed\";\n\nimport type {\n  StyleObject,\n  FontFaceObject,\n  KeyframesObject,\n} from \"styletron-standard\";\n\nimport {\n  styleBlockToRule,\n  atomicSelector,\n  keyframesBlockToRule,\n  declarationsToBlock,\n  keyframesToBlock,\n  fontFaceBlockToRule,\n} from \"../css\";\n\nexport type attrsT = {\n  \"data-hydrate\"?: \"keyframes\" | \"font-face\";\n  media?: string;\n  class?: string;\n};\n\nexport type sheetT = {\n  css: string;\n  attrs: attrsT;\n};\n\ntype optionsT = {\n  prefix?: string;\n};\n\nclass StyletronServer implements StandardEngine {\n  styleCache: MultiCache<{\n    pseudo: string;\n    block: string;\n  }>;\n  keyframesCache: Cache<KeyframesObject>;\n  fontFaceCache: Cache<FontFaceObject>;\n  styleRules: {\n    [x: string]: string;\n  };\n  keyframesRules: string;\n  fontFaceRules: string;\n\n  constructor(opts: optionsT = {}) {\n    this.styleRules = {\"\": \"\"};\n    this.styleCache = new MultiCache(\n      new SequentialIDGenerator(opts.prefix),\n      media => {\n        this.styleRules[media] = \"\";\n      },\n      (cache, id, value) => {\n        const {pseudo, block} = value;\n        this.styleRules[cache.key] += styleBlockToRule(\n          atomicSelector(id, pseudo),\n          block,\n        );\n      },\n    );\n\n    this.fontFaceRules = \"\";\n    this.fontFaceCache = new Cache(\n      new SequentialIDGenerator(opts.prefix),\n      (cache, id, value) => {\n        this.fontFaceRules += fontFaceBlockToRule(\n          id,\n          declarationsToBlock(value),\n        );\n      },\n    );\n\n    this.keyframesRules = \"\";\n    this.keyframesCache = new Cache(\n      new SequentialIDGenerator(opts.prefix),\n      (cache, id, value) => {\n        this.keyframesRules += keyframesBlockToRule(\n          id,\n          keyframesToBlock(value),\n        );\n      },\n    );\n  }\n\n  renderStyle(style: StyleObject): string {\n    return injectStylePrefixed(this.styleCache, style, \"\", \"\");\n  }\n\n  renderFontFace(fontFace: FontFaceObject): string {\n    const key = JSON.stringify(fontFace);\n    return this.fontFaceCache.addValue(key, fontFace);\n  }\n\n  renderKeyframes(keyframes: KeyframesObject): string {\n    const key = JSON.stringify(keyframes);\n    return this.keyframesCache.addValue(key, keyframes);\n  }\n\n  getStylesheets(): Array<sheetT> {\n    return [\n      ...(this.keyframesRules.length\n        ? [\n            {\n              css: this.keyframesRules,\n              attrs: {\"data-hydrate\": \"keyframes\"},\n            } as sheetT,\n          ]\n        : []),\n      ...(this.fontFaceRules.length\n        ? [\n            {\n              css: this.fontFaceRules,\n              attrs: {\"data-hydrate\": \"font-face\"},\n            } as sheetT,\n          ]\n        : []),\n      ...sheetify(this.styleRules, this.styleCache.getSortedCacheKeys()),\n    ];\n  }\n\n  getStylesheetsHtml(className: string = \"_styletron_hydrate_\") {\n    return generateHtmlString(this.getStylesheets(), className);\n  }\n\n  getCss() {\n    return (\n      this.keyframesRules +\n      this.fontFaceRules +\n      stringify(this.styleRules, this.styleCache.getSortedCacheKeys())\n    );\n  }\n}\n\nexport function generateHtmlString(sheets: Array<sheetT>, className: string) {\n  let html = \"\";\n  for (let i = 0; i < sheets.length; i++) {\n    const sheet = sheets[i];\n    const {class: originalClassName, ...rest} = sheet.attrs;\n    const attrs = {\n      class: originalClassName\n        ? `${className} ${originalClassName}`\n        : className,\n      ...(rest as attrsT),\n    };\n    html += `<style${attrsToString(attrs)}>${sheet.css}</style>`;\n  }\n  return html;\n}\n\nfunction attrsToString(attrs: attrsT) {\n  let result = \"\";\n  for (const attr in attrs) {\n    const value = attrs[attr];\n    if (value === true) {\n      result += \" \" + attr;\n    } else if (value !== false) {\n      result += ` ${attr}=\"${value}\"`;\n    }\n  }\n  return result;\n}\n\nfunction stringify(styleRules, sortedCacheKeys) {\n  let result = \"\";\n  sortedCacheKeys.forEach(cacheKey => {\n    const rules = styleRules[cacheKey];\n    if (cacheKey !== \"\") {\n      result += `@media ${cacheKey}{${rules}}`;\n    } else {\n      result += rules;\n    }\n  });\n  return result;\n}\n\nfunction sheetify(styleRules, sortedCacheKeys): Array<sheetT> {\n  if (sortedCacheKeys.length === 0) {\n    return [{css: \"\", attrs: {}}];\n  }\n  const sheets = [];\n  sortedCacheKeys.forEach(cacheKey => {\n    // omit media (cacheKey) attribute if empty\n    const attrs = cacheKey === \"\" ? {} : {media: cacheKey};\n    sheets.push({css: styleRules[cacheKey], attrs});\n  });\n  return sheets;\n}\n\nexport default StyletronServer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}